package vista;

import clasesDeApoyo.Conexion;
import br.com.adilson.util.Extenso;
import br.com.adilson.util.PrinterMatrix;
import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;



/**
 *
 * @author ALEJO
 */
public class CuadreCaja extends javax.swing.JFrame {

    String usuario;
    int codigoDeCierre;
    int idDelCierre;
    
    String codigo_factura;
    int valor_factura;

    int efectivo; 

    String user; 
    int producido;
    int dinero_caja; 
    int diferencia; 
    int no_facturas;
    int cambio;
    String observaciones; 
    
    
    String producido_str;
    String cantidadFacturas;
    String fecha_cierre;
    
    String Estado;
    String parq;
    String placa;
    String ocupado;
    
    DefaultTableModel modeloCierre;
    
    private final Logger log = Logger.getLogger(CuadreCaja.class);
    private URL url = CuadreCaja.class.getResource("Log4j.properties");
    /**
     * Creates new form CuadreCaja
     */
    public CuadreCaja() {
        initComponents();
        usuario = Login.usuario;
        
        setSize(397,390);
        setResizable(false);
        setLocationRelativeTo(null);
        setTitle("Generar cierre - Caja de " + usuario);
        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
                
        lbl_producido.setText(calcularProducido());
        lbl_noFacturas.setText(contarFacturas());
        
        //Consulta de datos a la BD
        try {
            modeloCierre = new DefaultTableModel();
            //table_listaFacturas.setModel(modeloCierre);

            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                        "select  Estado, Nombre_parqueadero, Placa, Propietario, Esta_en_parqueadero from parqueaderos");

            ResultSet rs = pst.executeQuery();

            ResultSetMetaData rsmd = rs.getMetaData();
            int cantidadColumnas = rsmd.getColumnCount();

            modeloCierre.addColumn("Estado");
            modeloCierre.addColumn("N° Parq");
            modeloCierre.addColumn("Placa");
            modeloCierre.addColumn("Propietario");
            modeloCierre.addColumn("Parqueado?");

            int[] anchosTabla = {15,5,20,60,10};

            for(int x=0; x < cantidadColumnas; x++){
                //table_listaFacturas.getColumnModel().getColumn(x).setPreferredWidth(anchosTabla[x]);
            }

            while (rs.next()) {

                Object[] filas = new Object[cantidadColumnas];

                for (int i = 0; i < cantidadColumnas; i++) {
                    filas[i] = rs.getObject(i + 1);
                }
                modeloCierre.addRow(filas);
            }
                cn.close();        

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error al mostrar información, ¡Contacte al administrador!");
            }
        
        
        table_listaFacturas.setVisible(false);
    }
    
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("icons/generarPDF.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lbl_producido = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txt_dineroDeCaja = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        lbl_diferencia = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lbl_noFacturas = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_observaciones = new javax.swing.JTextArea();
        btn_imprimirCierre = new javax.swing.JButton();
        btn_cancelar = new javax.swing.JButton();
        btn_calcular = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Generar cierre");
        setIconImage(getIconImage());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Producido del turno ($):");

        lbl_producido.setText("Producido del turno:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Dinero en caja ($):");

        txt_dineroDeCaja.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_dineroDeCajaKeyPressed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Diferencia ($):");

        lbl_diferencia.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lbl_diferencia.setText(".");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("N° de facturas:");

        lbl_noFacturas.setText("N° de facturas:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Observaciones:");

        jTextArea_observaciones.setColumns(20);
        jTextArea_observaciones.setLineWrap(true);
        jTextArea_observaciones.setRows(5);
        jTextArea_observaciones.setWrapStyleWord(true);
        jTextArea_observaciones.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextArea_observacionesKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea_observaciones);

        btn_imprimirCierre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/print_15107.png"))); // NOI18N
        btn_imprimirCierre.setText("Imprimir cierre");
        btn_imprimirCierre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_imprimirCierreActionPerformed(evt);
            }
        });

        btn_cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Cancelar.png"))); // NOI18N
        btn_cancelar.setText("Cancelar");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });

        btn_calcular.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/calculator-icon_34473.png"))); // NOI18N
        btn_calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_calcularActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_imprimirCierre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_cancelar)
                .addGap(36, 36, 36))
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_producido)
                            .addComponent(txt_dineroDeCaja, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_diferencia)
                            .addComponent(lbl_noFacturas))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_calcular, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lbl_producido))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btn_calcular, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txt_dineroDeCaja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lbl_diferencia))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lbl_noFacturas))
                .addGap(25, 25, 25)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_imprimirCierre, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
       dispose();
    }//GEN-LAST:event_btn_cancelarActionPerformed

    private void btn_calcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_calcularActionPerformed
        calcularDiferencia();
    }//GEN-LAST:event_btn_calcularActionPerformed

    private void txt_dineroDeCajaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_dineroDeCajaKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            calcularDiferencia();
        }
    }//GEN-LAST:event_txt_dineroDeCajaKeyPressed

    //Boton Imprimir cierre
    private void btn_imprimirCierreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_imprimirCierreActionPerformed
        
        String producido = lbl_producido.getText();
        String dinero_caja = txt_dineroDeCaja.getText();
        String diferencia = lbl_diferencia.getText();
        String no_facts = lbl_noFacturas.getText();
        String observaciones = jTextArea_observaciones.getText().trim();
        
        
        if(dinero_caja.equals("")){
            txt_dineroDeCaja.setBackground(Color.red);
            JOptionPane.showMessageDialog(null, "Ingrese la cantidad actual en Caja para calcular.");
            txt_dineroDeCaja.setBackground(Color.white);
        
        }else if(observaciones.equals("")){
            jTextArea_observaciones.setBackground(Color.red);
            JOptionPane.showMessageDialog(null, "Ingrese novedades de manejo de Caja.");
            jTextArea_observaciones.setBackground(Color.white);
       
        }else if(diferencia.equals(".")){
           lbl_diferencia.setForeground(Color.red);
           JOptionPane.showMessageDialog(null, "Calcule la diferencia.");
           jTextArea_observaciones.setForeground(Color.BLACK);
        
        }else{
            try{
                //Creamos el cierre en la base de datos
                int producido_int = Integer.parseInt(producido);
                int dinCaja_int = Integer.parseInt(dinero_caja);
                int diferencia_int = Integer.parseInt(diferencia);
                int noFacts_int = Integer.parseInt(no_facts);
                
                codigoDeCierre = codigosCierre();

                Connection cn = Conexion.conectar();
                PreparedStatement pst = cn.prepareStatement("insert into cierres values (?,?,?,?,?,?,?,?,?)");

                pst.setInt(1, 0);
                pst.setInt(2, codigoDeCierre);
                pst.setString(3, fecha_de_cierre());
                pst.setString(4, usuario);
                pst.setInt(5, producido_int);
                pst.setInt(6, dinCaja_int);
                pst.setInt(7, diferencia_int);
                pst.setInt(8, noFacts_int);
                pst.setString(9, observaciones);
                             
                pst.executeUpdate();
                cn.close();

                JOptionPane.showMessageDialog(null, "Cierre generado satisfactoriamente");
                dispose();
                
                int idCierreDef = obtenerIdCierreConCodigo(codigoDeCierre);
                asignarCierreAFacturasContabilizadas(idCierreDef);
                generarCierre();
                
                PanelCaja.laCajaFueAbierta = false;
                bloquearCaja();
                
            }catch(SQLException e){
                JOptionPane.showMessageDialog(null, "¡¡ERROR al gestionar cierre!!, contacte al administrador.");
            }
        }    
    }//GEN-LAST:event_btn_imprimirCierreActionPerformed

    private void jTextArea_observacionesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea_observacionesKeyTyped
        //Cuenta la cantidad maxima de caracteres
        int numeroCaracteres = 250;
        if(jTextArea_observaciones.getText().length()== numeroCaracteres){
            evt.consume();
            JOptionPane.showMessageDialog(null,"Solo 30 caracteres");
        }
    }//GEN-LAST:event_jTextArea_observacionesKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CuadreCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CuadreCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CuadreCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CuadreCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    //Esto cambia la apariencia de la app para que se acomode al Siste Operativo
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    new CuadreCaja().setVisible(true);
                }catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    //Logger.getLogger(CuadreCaja.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_calcular;
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JButton btn_imprimirCierre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea_observaciones;
    private javax.swing.JLabel lbl_diferencia;
    private javax.swing.JLabel lbl_noFacturas;
    private javax.swing.JLabel lbl_producido;
    private javax.swing.JTextField txt_dineroDeCaja;
    // End of variables declaration//GEN-END:variables

    //Metodo que calcula el producido
    public String calcularProducido(){
        
        try {
            Connection cn2 = Conexion.conectar();
            PreparedStatement pst2 = cn2.prepareStatement(
                "SELECT SUM(Valor_a_pagar) FROM facturas WHERE Contabilizada = 'No'");
            ResultSet rs2 = pst2.executeQuery();

            if(rs2.next()){
                producido = rs2.getInt("SUM(Valor_a_pagar)");
                producido_str = Integer.toString(producido);
            }
            cn2.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "¡¡ERROR al cargar producido del día, contacte al administrador.");
        }
        return producido_str;
    }
    
    //Metodo que calcula la diferencia entre el producido y el dinero en caja
    public void calcularDiferencia(){
        
        String producido = lbl_producido.getText();
        String din_Caja = txt_dineroDeCaja.getText();
        
        if(din_Caja.equals("")){
            JOptionPane.showMessageDialog(null, "Ingrese la cantidad actual en Caja para calcular.");
        }else{
            int producido_int = Integer.parseInt(producido);
            int dinCaja_int = Integer.parseInt(din_Caja);

            int diferencia = producido_int - dinCaja_int;

            if(diferencia > 0){
                String diferencia_str = String.valueOf(diferencia);
                lbl_diferencia.setForeground(Color.red);
                lbl_diferencia.setText(diferencia_str);
            }else if(diferencia <= 0){
                String diferencia_str = String.valueOf(diferencia);
                lbl_diferencia.setForeground(Color.green);
                lbl_diferencia.setText(diferencia_str);
            }
        }
    }
    
    //Metodo que genera los codigos de los cierres
    public int codigosCierre(){
        Random miAleatorio = new Random();
        int N = miAleatorio.nextInt(1000000000);
        return N;
    }
    
    //Metodo que imprime el formato de cierre
    public void generarCierre(){
        
        //Obtenemos la info de la interfaz para la factura
        String producido = lbl_producido.getText();
        String monto_caja = txt_dineroDeCaja.getText();
        String diferencia = lbl_diferencia.getText();
        
        String facts = lbl_noFacturas.getText();
        int nofacts = Integer.parseInt(facts);
                
        String notas = jTextArea_observaciones.getText(); 
        
        //Hace la consulta de las facturas cerradas sin contabilizar y sin cierre asignado
        /*
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                "SELECT Codigo, Placa, Valor_a_pagar, Efectivo, Cambio from facturas where Estado_fctra='Cerrada' and Contabilizada='No' and Id_cierre=1"
            );
            
            ResultSet rs = pst.executeQuery();
            
            String [][] datos = new String[nofacts][4];
            
            
            
                        
            while (rs.next()){
                codigo_factura = rs.getString("Codigo");
                valor_factura = rs.getInt("Valor_a_pagar");
                placa = rs.getString("Placa");
                efectivo = rs.getInt("Efectivo");
                cambio = rs.getInt("Cambio");
                
                for (int i = 0; i < nofacts; i++) {
                    for (int j = 0; j < 4; j++) {
                      /*  
                        if(j == ){
                            
                        }
                        
                        datos[i][j] = rs.getObject(i + 1);
                    }
                }        modelo.addRow(filas);
                        
            }
            cn.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "¡¡ERROR al recargar cierre!!, contacte al administrador.");
        }
        */
           
        
        
        //Creamos la factura a punta de codigo para que sea continua
        PrinterMatrix printer = new PrinterMatrix();

        Extenso e = new Extenso();

        e.setNumber(101.85);
        
        //Definir el tamanho del papel para la impresion  aca 25 lineas y 80 columnas
        printer.setOutSize(nofacts + 5, 46);
        //Imprimir * 1ra linea de la columa de 1 a 80
        printer.printCharAtCol(1, 1, 46, "=");
        
        //Imprimir Encabezado nombre del La Empresa
        printer.printTextWrap(1, 2, 2, 46, "SISTEMA DE PARKING - CIERRE DE CAJA");
        printer.printTextWrap(2, 2, 30, 46, fecha_cierre);
       
        printer.printTextWrap(3, 8, 1, 46, "Cod | Placa | Valor | Efectivo | Cambio($)");
        printer.printCharAtCol(5, 1, 46, "-");
       
       int pie = 0;
       
        for (int i = 0; i < nofacts; i++) { printer.printTextWrap(5 + i, 10, 1, 46, codigo_factura+"  |  "+placa+"  |  "+valor_factura+"  |  "+efectivo+"  |  "+cambio); pie++;} 
        
        if(nofacts > 0){
            printer.printCharAtCol(nofacts + 1, 1, 46, "=");
            printer.printTextWrap(nofacts + 1, nofacts + 2, 1, 46, "Codigo de cierre: " + codigoDeCierre);
            printer.printCharAtCol(nofacts + 2, 1, 46, "=");
            printer.printTextWrap(nofacts + 2, nofacts + 3, 1, 46, "Usuario: " + usuario);
            printer.printCharAtCol(nofacts + 3, 1, 46, "=");
            printer.printTextWrap(nofacts + 3, nofacts + 4, 1, 46, "Producido: " + producido);
            printer.printCharAtCol(nofacts + 4, 1, 46, "=");
            printer.printTextWrap(nofacts + 4, nofacts + 5, 1, 46, "Dinero en caja: " + monto_caja);
            printer.printCharAtCol(nofacts + 5, 1, 46, "=");
            printer.printTextWrap(nofacts + 5, nofacts + 6, 1, 46, "Diferencia: " + diferencia);
            printer.printCharAtCol(nofacts + 6, 1, 46, "=");
            printer.printTextWrap(nofacts + 6, nofacts + 7, 1, 46, "No facturas: " + nofacts);
            printer.printCharAtCol(nofacts + 7, 1, 46, "=");
            printer.printTextWrap(nofacts + 7, nofacts + 8, 1, 46, "Observaciones: " + notas);
            
        }else{
            printer.printCharAtCol(25, 1, 46, "=");
            printer.printTextWrap(26, 26, 1, 46, "Codigo de cierre: " + codigoDeCierre);
            printer.printCharAtCol(27, 1, 46, "=");
            printer.printTextWrap(27, 28, 1, 46, "Esta boleta no tiene valor fiscal, solo para uso interno.: + Descripciones........");

        }
        printer.toFile("cierreDeCaja.txt");

      FileInputStream inputStream = null;
        try {
            inputStream = new FileInputStream("cierreDeCaja.txt");
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
        if (inputStream == null) {
            return;
        }

        /*
        DocFlavor docFormat = DocFlavor.INPUT_STREAM.AUTOSENSE;
        Doc document = new SimpleDoc(inputStream, docFormat, null);

        PrintRequestAttributeSet attributeSet = new HashPrintRequestAttributeSet();

        PrintService defaultPrintService = PrintServiceLookup.lookupDefaultPrintService();


        if (defaultPrintService != null) {
            DocPrintJob printJob = defaultPrintService.createPrintJob();
            try {
                printJob.print(document, attributeSet);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            System.err.println("Verifique la conexión de su impresora.");
        }

        //inputStream.close();
        */
        
        
        
        
         
            
            
        
        
    }
        
    //Metodo que cuenta la cantidad de facturas generadas y por contabilizar
    public String contarFacturas(){
        
        try {
            Connection cn3 = Conexion.conectar();
            PreparedStatement pst3 = cn3.prepareStatement(
                "select count(*) from facturas where Estado_fctra='Cerrada' AND Contabilizada='No'");
            ResultSet rs3 = pst3.executeQuery();

            if(rs3.next()){
                int cant_facturas = rs3.getInt("count(*)");
                cantidadFacturas = Integer.toString(cant_facturas);
            }
            cn3.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "¡¡ERROR al cargar facturas del dia, contacte al administrador.");
        }
        return cantidadFacturas;
    }
    
    //Metodo que obtiene el id del cierre creado
    public int obtenerIdCierreConCodigo(int codigoDelCierre){
        
        try {
            Connection cn8 = Conexion.conectar();
            PreparedStatement pst8 = cn8.prepareStatement(
                "SELECT Id_cierre FROM cierres WHERE Codigo = '"+codigoDelCierre+"'");
            ResultSet rs8 = pst8.executeQuery();

            if(rs8.next()){
                idDelCierre = rs8.getInt("Id_cierre");
            }
            cn8.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "¡¡ERROR interno!!, contacte al administrador.");
        }
        return idDelCierre;
    }
    
    //Metodo que le aprovisiona el id de cierre a las facturas contabilizadas
    public void asignarCierreAFacturasContabilizadas(int idEsperado){
        
        try{
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement("update facturas set Contabilizada='Si', Id_cierre ='"+idEsperado+"' where Estado_fctra = 'Cerrada' and Contabilizada='No'");

            pst.executeUpdate();
            cn.close();

            }catch(SQLException e){
                JOptionPane.showMessageDialog(null, "¡¡ERROR al contabilizar facturas, contacte al administrador.");
            }
        
        
    }
    
    
    
    //Metodo que genera la fecha en que fue generada la factura
    public String fecha_de_cierre(){
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = Calendar.getInstance();
        Date date = cal.getTime();
        fecha_cierre = sdf.format(date);
        return fecha_cierre;
    }
}

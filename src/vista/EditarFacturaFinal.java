package vista;

import clasesDeApoyo.Conexion;
import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;
import modelo.Convenio;
import modelo.Tarifa;
import org.apache.log4j.Logger;



/**
 *
 * @author ALEJO
 */
public class EditarFacturaFinal extends javax.swing.JFrame {

    String factura_actualizada;
    int ID;
    javax.swing.JTable tablafacturas;
    int FilaAnterior;
    int montoDelaTarifa;
    int validacion = 0;
    int tarifa_escogida;
    int convenio_escogido;
    
    
    String fecha_factura;
    String usuario;
    
    
    DefaultTableModel modelo;
    
    Convenio nomConvenio;
    Tarifa nomTarifa;
    
    Convenio conv = new Convenio();
    Tarifa tarif = new Tarifa();
      
    Date hora_ingr;
    Date hora_salid;
    
    String placa_back;
    
    private final Logger log = Logger.getLogger(EditarFacturaFinal.class);
    private URL url = EditarFacturaFinal.class.getResource("Log4j.properties");
    
    /**
     * Creates new form nuevoUsuario
     */
    public EditarFacturaFinal() {
        initComponents();
        factura_actualizada = GestionarFacturas.codigoFactura_update;
        tablafacturas = GestionarFacturas.table_listaFacturas;
        modelo = GestionarFacturas.modelo;
        usuario = Login.usuario;
        
        setSize(680,610);
        setResizable(false);
        setTitle("Editar factura");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        
        DefaultComboBoxModel modeloConv = new DefaultComboBoxModel(conv.mostrarConvenios());
        cmb_convenios.setModel(modeloConv);

        DefaultComboBoxModel modeloTarif = new DefaultComboBoxModel(tarif.mostrarTarifas());
        cmb_tarifas.setModel(modeloTarif);
              
        //Hace la consulta de registros a la base de datos
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                "SELECT Fac.Codigo, Fac.Placa, Fac.Propietario, Fac.Tipo_vehiculo, Fac.Id_convenio, Fac.Id_tarifa, Fac.Hora_ingreso, Fac.Hora_salida, Fac.Valor_a_pagar, Fac.Efectivo, Fac.Cambio, Parq.Nombre_parqueadero, Conv.Id_convenio, Tar.Id_tarifa from facturas Fac INNER JOIN parqueaderos Parq ON Fac.No_parqueadero = Parq.Id_parqueadero INNER JOIN convenios Conv ON Fac.Id_convenio = Conv.Id_convenio INNER JOIN tarifas Tar ON Fac.Id_tarifa = Tar.Id_tarifa WHERE Fac.Codigo = '" + factura_actualizada + "'");
            ResultSet rs = pst.executeQuery();
            
            if(rs.next()){
                String codigo = Integer.toString(rs.getInt("Fac.Codigo"));
                lbl_codigo.setText(codigo);
                
                placa_back = rs.getString("Fac.Placa");
                txt_placa.setText(placa_back);
                txt_propietario.setText(rs.getString("Fac.Propietario"));
                cmb_tipVehi.setSelectedItem(rs.getString("Fac.Tipo_vehiculo"));
                txt_noParq.setText(rs.getString("Parq.Nombre_parqueadero"));
                txt_horaIngreso.setText(rs.getString("Fac.Hora_ingreso"));
                txt_horaSalida.setText(rs.getString("Fac.Hora_salida"));
                txt_valorAPagar.setText(rs.getString("Fac.Valor_a_pagar"));
                txt_efectivo.setText(rs.getString("Fac.Efectivo"));
                lbl_cambio.setText(rs.getString("Fac.Cambio")); 
                
                cmb_convenios.setSelectedIndex(rs.getInt("Conv.Id_convenio"));
                cmb_tarifas.setSelectedIndex(rs.getInt("Tar.Id_tarifa"));
            }
            cn.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "¡¡ERROR al cargar!!, contacte al administrador.");
        }
    }
    
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("icons/editFctraIco.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_placa = new javax.swing.JTextField();
        txt_propietario = new javax.swing.JTextField();
        txt_noParq = new javax.swing.JTextField();
        btn_cancelar = new javax.swing.JButton();
        btn_actualizar = new javax.swing.JButton();
        lbl_imgEditUsuario = new javax.swing.JLabel();
        cmb_tarifas = new javax.swing.JComboBox<>();
        cmb_convenios = new javax.swing.JComboBox<>();
        txt_horaIngreso = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txt_horaSalida = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txt_valorAPagar = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txt_efectivo = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        lbl_cambio = new javax.swing.JLabel();
        btn_calculadiora = new javax.swing.JButton();
        cmb_tipVehi = new javax.swing.JComboBox<>();
        lbl_codigo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconImage(getIconImage());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Cod. Fctra:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Placa:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Propietario:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Clase:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("N° parqueadero:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Convenio:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Tarifa:");

        txt_placa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_placaFocusLost(evt);
            }
        });
        txt_placa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_placaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_placaKeyTyped(evt);
            }
        });

        txt_propietario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_propietarioKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_propietarioKeyTyped(evt);
            }
        });

        txt_noParq.setEditable(false);
        txt_noParq.setBackground(new java.awt.Color(204, 204, 204));

        btn_cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Cancelar.png"))); // NOI18N
        btn_cancelar.setText("Cancelar");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });

        btn_actualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refresh256_24854.png"))); // NOI18N
        btn_actualizar.setText("Actualizar");
        btn_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_actualizarActionPerformed(evt);
            }
        });

        lbl_imgEditUsuario.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_imgEditUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/editFctra.png"))); // NOI18N

        cmb_tarifas.setEnabled(false);
        cmb_tarifas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_tarifasItemStateChanged(evt);
            }
        });

        cmb_convenios.setEnabled(false);
        cmb_convenios.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_conveniosItemStateChanged(evt);
            }
        });

        txt_horaIngreso.setEditable(false);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Hora Ingreso:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Hora Salida:");

        txt_horaSalida.setEditable(false);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Valor a pagar ($):");

        txt_valorAPagar.setEditable(false);
        txt_valorAPagar.setEnabled(false);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Efectivo ($):");

        txt_efectivo.setEnabled(false);
        txt_efectivo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_efectivoKeyPressed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Cambio ($):");

        lbl_cambio.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lbl_cambio.setForeground(new java.awt.Color(51, 204, 0));
        lbl_cambio.setText("Cambio ($):");

        btn_calculadiora.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/calculator-icon_34473.png"))); // NOI18N
        btn_calculadiora.setEnabled(false);
        btn_calculadiora.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_calculadioraMouseClicked(evt);
            }
        });
        btn_calculadiora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_calculadioraActionPerformed(evt);
            }
        });

        cmb_tipVehi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "AUTOMOVIL", "MOTO" }));
        cmb_tipVehi.setEnabled(false);
        cmb_tipVehi.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_tipVehiItemStateChanged(evt);
            }
        });

        lbl_codigo.setText("lbl_codigo");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_placa, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_propietario, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_noParq, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmb_tipVehi, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmb_convenios, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmb_tarifas, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(lbl_imgEditUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_horaIngreso, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_valorAPagar, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txt_efectivo, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btn_calculadiora, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txt_horaSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_cambio)
                            .addComponent(lbl_codigo))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_actualizar)
                .addGap(18, 18, 18)
                .addComponent(btn_cancelar)
                .addGap(42, 42, 42))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(lbl_imgEditUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(lbl_codigo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel2)
                            .addComponent(txt_placa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(txt_propietario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cmb_tipVehi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(txt_noParq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(cmb_convenios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(cmb_tarifas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txt_horaIngreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txt_horaSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txt_valorAPagar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txt_efectivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(btn_calculadiora, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(lbl_cambio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_actualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Metodo del boton cancelar
    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
        dispose();
        new InformacionUsuario().setVisible(true);
    }//GEN-LAST:event_btn_cancelarActionPerformed

    //Metodo boton Guardar
    private void btn_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_actualizarActionPerformed
     
        int tipVehi_cmb, convenio_cmb, tarifa_cmb = 0;
        String codigo, placa, dueño = "";
        String tipoVehi_string="";
        String no_parq, hora_ingreso, hora_salida ="";
        String valorPagar, efectivo, cambio="";
        
        
        
        //Creamos un objeto de la clase modelo Convenio con lo seleccionado en el combobox de Convenio
        nomConvenio = (Convenio)cmb_convenios.getSelectedItem(); 
        
        //Creamos un objeto de la clase modelo Convenio con lo seleccionado en el combobox de Convenio
        nomTarifa = (Tarifa)cmb_tarifas.getSelectedItem(); 
        
        codigo = lbl_codigo.getText().trim();
        placa = txt_placa.getText().trim();
        dueño = txt_propietario.getText().trim();
        no_parq = txt_noParq.getText().trim();
        hora_ingreso = txt_horaIngreso.getText().trim();
        tipVehi_cmb = cmb_tipVehi.getSelectedIndex() + 1;
        convenio_cmb = cmb_tipVehi.getSelectedIndex() + 1;
        tarifa_cmb = cmb_tipVehi.getSelectedIndex() + 1;
        hora_salida = txt_horaSalida.getText().trim();
        valorPagar = txt_valorAPagar.getText().trim();
        efectivo = txt_efectivo. getText().trim();
        cambio = lbl_cambio.getText().trim();
        
        int valorPagar_int = Integer.parseInt(valorPagar);
        int efectivo_int = Integer.parseInt(efectivo);
        int cambio_int = Integer.parseInt(cambio);
        
        
        int convenioValido = nomConvenio.getId();
        int tarifaValida = nomTarifa.getId();
        
        
        if(placa.equals("")){
            txt_placa.setBackground(Color.red);
            validacion++;
        }
        if(dueño.equals("")){
            txt_propietario.setBackground(Color.red);
            validacion++;
        }
        
        if(tipVehi_cmb == 1){
            tipoVehi_string = "Seleccione"; 
            validacion++;
        }        
        else if(tipVehi_cmb == 2){
            tipoVehi_string = "AUTOMOVIL";
        }else if(tipVehi_cmb == 3){
            tipoVehi_string = "MOTO";
        } 
        
        if(convenioValido==0){
            cmb_convenios.setBackground(Color.red);
            validacion++;
        }
        
        if(tarifaValida==0){
            cmb_tarifas.setBackground(Color.red);
            validacion++;
        }
        
        if(efectivo.equals("")){
            txt_placa.setBackground(Color.red);
            validacion++;
        }
        
        if (validacion == 0) {
            
            FilaAnterior = tablafacturas.getSelectedRow();
            String fecha = fecha_de_factura();
          
            try{
                Connection cn = Conexion.conectar();
                PreparedStatement pst = cn.prepareStatement("update facturas set Fecha_factura='"+fecha+"',Placa ='"+placa+"',Propietario='"+dueño+"',Tipo_vehiculo='"+tipoVehi_string+"',Facturado_por='"+usuario+"',"
                   +"Id_convenio='"+nomConvenio.getId()+"',Id_tarifa='"+nomTarifa.getId()+"',Hora_ingreso='"+hora_ingreso+"',Hora_salida='"+hora_salida+"',Valor_a_pagar='"+valorPagar_int+"',Efectivo='"+efectivo_int+"',Cambio='"+cambio_int+"' where Codigo ='"+codigo+"'");

                pst.executeUpdate();
                cn.close();
                
                int codigo_int = Integer.parseInt(codigo);
                
                Object Fila[] = new Object[4];
                Fila[0] = codigo_int;
                Fila[1] = fecha;
                Fila[2] = usuario;
                Fila[3] = valorPagar;
                
                modelo.addRow(Fila);
                modelo.removeRow(FilaAnterior);
                
                //Actualizamos los datos en la tabla de parqueaderos
                try{
                    Connection cn6 = Conexion.conectar();
                    PreparedStatement pst6 = cn6.prepareStatement("update parqueaderos set Placa='"+placa+"',Propietario ='"+dueño+"'where Nombre_parqueadero ='"+no_parq+"'");

                    pst6.executeUpdate();
                    cn6.close();

                }catch(SQLException e){
                    JOptionPane.showMessageDialog(null, "¡¡ERROR al actualizar!!, contacte al administrador.");
                }
                
                JOptionPane.showMessageDialog(null, "Factura actualizada satisfactoriamente.");
                GestionarFacturas.hayFacturaAbierta = false;
                this.dispose();
                

            }catch(SQLException e){
               JOptionPane.showMessageDialog(null, "¡¡ERROR al actualizar!!, contacte al administrador.");

            }    
        
        } else {
            JOptionPane.showMessageDialog(null, "Debes llenar todos los campos.");
            Normalizar();
        } 
    }//GEN-LAST:event_btn_actualizarActionPerformed

    private void txt_placaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_placaKeyTyped
        
        //Cuenta la cantidad maxima de caracteres
        int numeroCaracteres = 6;
        if(txt_placa.getText().length()== numeroCaracteres){
            evt.consume();
            JOptionPane.showMessageDialog(null,"Solo 6 caracteres");
        }

        ////Forza a escribir en mayuscula
        char c=evt.getKeyChar();
        if(Character.isLowerCase(c)){
            evt.setKeyChar(Character.toUpperCase(c));
            
        }
    }//GEN-LAST:event_txt_placaKeyTyped

    private void txt_placaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_placaFocusLost
        validacionesAntesDeIngresar();
    }//GEN-LAST:event_txt_placaFocusLost

    private void txt_placaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_placaKeyPressed
        
    }//GEN-LAST:event_txt_placaKeyPressed

    private void cmb_tipVehiItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_tipVehiItemStateChanged
        String tipVehi_string = (String)cmb_tipVehi.getSelectedItem();
            
        if(tipVehi_string.equals("Seleccione")){
            cmb_convenios.setSelectedIndex(0);
            cmb_tarifas.setSelectedIndex(0);

        } else if(tipVehi_string.equals("AUTOMOVIL")){
            cmb_convenios.setSelectedIndex(1);
            cmb_tarifas.setSelectedIndex(2);

        } else if(tipVehi_string.equals("MOTO")){
            cmb_convenios.setSelectedIndex(1);
            cmb_tarifas.setSelectedIndex(3);
        }
    }//GEN-LAST:event_cmb_tipVehiItemStateChanged

    private void txt_propietarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_propietarioKeyPressed
       
    }//GEN-LAST:event_txt_propietarioKeyPressed

    private void btn_calculadioraMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_calculadioraMouseClicked
        
    }//GEN-LAST:event_btn_calculadioraMouseClicked

    private void btn_calculadioraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_calculadioraActionPerformed
       calcularVueltas();
    }//GEN-LAST:event_btn_calculadioraActionPerformed

    private void txt_propietarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_propietarioKeyTyped
        
        //Cuenta la cantidad maxima de caracteres
        int numeroCaracteres = 30;
        if(txt_propietario.getText().length()== numeroCaracteres){
            evt.consume();
            JOptionPane.showMessageDialog(null,"Solo 30 caracteres");
        }

        //Forza aescribir en mayuscula
        char c=evt.getKeyChar();
        if(Character.isLowerCase(c)){
            evt.setKeyChar(Character.toUpperCase(c));
            
        }
    }//GEN-LAST:event_txt_propietarioKeyTyped

    private void cmb_conveniosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_conveniosItemStateChanged
        convenio_escogido = cmb_convenios.getSelectedIndex();
        String tipVehi_string = (String)cmb_tipVehi.getSelectedItem();
            
        if(convenio_escogido == 0){
            cmb_convenios.setSelectedIndex(1);
        
        } else if(convenio_escogido == 1){
            
            if(tipVehi_string.equals("AUTOMOVIL")){
                cmb_tarifas.setSelectedIndex(2);
                calcularTarifa(tarifa_escogida);

            } else if(tipVehi_string.equals("MOTO")){
                cmb_tarifas.setSelectedIndex(3);
                calcularTarifa(tarifa_escogida);
            }
            
        } else if(convenio_escogido > 1){
            txt_valorAPagar.setText("0");
            lbl_cambio.setText("0");
            cmb_tarifas.setSelectedIndex(1);
            calcularVueltas();
        }
    }//GEN-LAST:event_cmb_conveniosItemStateChanged
  
    private void cmb_tarifasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_tarifasItemStateChanged
        tarifa_escogida = cmb_tarifas.getSelectedIndex();
        String tipVehi_string = (String)cmb_tipVehi.getSelectedItem();
         
        if(tarifa_escogida == 0){
            cmb_tarifas.setSelectedIndex(1);

        } else if(tarifa_escogida == 1){
            txt_valorAPagar.setText("0");
            lbl_cambio.setText("0");
            calcularVueltas();

        } else if(tarifa_escogida > 1){
            
            if(tipVehi_string.equals("AUTOMOVIL")){
                calcularTarifa(tarifa_escogida);

            } else if(tipVehi_string.equals("MOTO")){
                calcularTarifa(tarifa_escogida);
            }
        }
    }//GEN-LAST:event_cmb_tarifasItemStateChanged

    private void txt_efectivoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_efectivoKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            calcularVueltas();
        }
    }//GEN-LAST:event_txt_efectivoKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditarFacturaFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditarFacturaFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditarFacturaFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditarFacturaFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    //Esto cambia la apariencia de la app para que se acomode al Siste Operativo
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    new EditarFacturaFinal().setVisible(true);
                
                }catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    //Logger.getLogger(EditarFacturaFinal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_actualizar;
    private javax.swing.JButton btn_calculadiora;
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JComboBox<String> cmb_convenios;
    private javax.swing.JComboBox<String> cmb_tarifas;
    private javax.swing.JComboBox<String> cmb_tipVehi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lbl_cambio;
    private javax.swing.JLabel lbl_codigo;
    private javax.swing.JLabel lbl_imgEditUsuario;
    private javax.swing.JTextField txt_efectivo;
    private javax.swing.JTextField txt_horaIngreso;
    private javax.swing.JTextField txt_horaSalida;
    private javax.swing.JTextField txt_noParq;
    private javax.swing.JTextField txt_placa;
    private javax.swing.JTextField txt_propietario;
    private javax.swing.JTextField txt_valorAPagar;
    // End of variables declaration//GEN-END:variables

    //Metodo que limpia el formulario
    public void Limpiar(){
        txt_placa.setText("");
        txt_propietario.setText("");
        cmb_tipVehi.setSelectedIndex(0);
        txt_noParq.setText("");
        cmb_convenios.setSelectedIndex(0);
        cmb_tarifas.setSelectedIndex(0);
    }
   
    //Metodo que normaliza el formulario
    public void Normalizar(){
        txt_placa.setBackground(Color.WHITE);
        txt_propietario.setBackground(Color.WHITE);
        cmb_tipVehi.setBackground(Color.WHITE);
        txt_noParq.setBackground(Color.WHITE);
        cmb_convenios.setBackground(Color.WHITE);
        cmb_tarifas.setBackground(Color.WHITE);
    }
    
    //Metodo que genera la fecha en que fue generada la factura
    public String fecha_de_factura(){
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = Calendar.getInstance();
        Date date = cal.getTime();
        fecha_factura = sdf.format(date);
        return fecha_factura;
    }
    
    //Metodo que hace validaciones antes de editar 
    public void validacionesAntesDeIngresar(){
        
        String placa = txt_placa.getText().trim();
        
        if(placa.equals("")){
            JOptionPane.showMessageDialog(null, "Ingrese la placa del vehiculo.");
            txt_placa.setText(placa_back);
            txt_placa.requestFocus();
        }
        else{
            
            if(placa.length() <6){
                JOptionPane.showMessageDialog(null,"Placa no válida.");
                txt_placa.setText(placa_back);
                txt_placa.requestFocus();
            }else{
            
                //Valida si el vehiculo esta registrado
                try {
                    Connection cn1 = Conexion.conectar();
                    PreparedStatement pst1;
                    pst1 = cn1.prepareStatement(
                                "select Propietario, Clase, Id_parqueadero, Id_convenio, Id_tarifa from vehiculos where Placa = '"+placa+"'");

                    ResultSet rs1 = pst1.executeQuery();

                    if (rs1.next()) {

                        JOptionPane.showMessageDialog(null, "La placa indicada corresponde con un vehiculo ya registrado.");
                        txt_placa.setText(placa_back);

                    }else{
                        txt_propietario.setEditable(true);
                        cmb_tipVehi.setEnabled(true);
                        txt_noParq.setEditable(false);
                        cmb_convenios.setEnabled(true);
                        cmb_tarifas.setEnabled(true);
                        txt_valorAPagar.setEnabled(true);
                        txt_efectivo.setEnabled(true);
                        btn_calculadiora.setEnabled(true);
                        
                    }
                }catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "¡¡ERROR al cargar!!, contacte al administrador.");
                }
            }
        }
    }  
    //Metodo que calcula la tarifa a pagar de parqueadero
    public  void calcularTarifa(int variableTarifa){
           
        //Hace la consulta de la tarifa asignada al vehiculo
        try {
            Connection cn2 = Conexion.conectar();
            PreparedStatement pst2 = cn2.prepareStatement(
                "SELECT Monto from tarifas where Id_tarifa ='" + variableTarifa + "'");
            ResultSet rs2 = pst2.executeQuery();

            if(rs2.next()){
                String monto = rs2.getString("Monto");
                montoDelaTarifa = Integer.parseInt(monto);
            }
            cn2.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "¡¡ERROR al cargar tarifa de vehiculo!!, contacte al administrador.");
        }
            
        try{
            //Calculamos el valor a pagar por el vehiculo
            int valorAPagar = 0;
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

            //Obtenemos la hora de ingreso y salida y las convertimos a Date
            String hora_entradaVehiculo = txt_horaIngreso.getText();
            String hora_salidaVehiculo = txt_horaSalida.getText();

            hora_ingr = dateFormat.parse(hora_entradaVehiculo);
            hora_salid = dateFormat.parse(hora_salidaVehiculo);

            //Calculamos la diferencia de tiempos (tiempo de ingreso vs tiempo de salida)
            int minutosACobrar = (int) (hora_salid.getTime() - hora_ingr.getTime())/60000;

            //Aplicamos la tarifa al tiempo estimado
            valorAPagar = minutosACobrar * montoDelaTarifa;

            String valor_Pagar = String.valueOf(valorAPagar);
            txt_valorAPagar.setText(valor_Pagar);
            
            calcularVueltas();

        }catch (ParseException ex) {  
            //Logger.getLogger(LiquidacionVehiculo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //Metodo que calcula las vueltas que hay que darle al cliente
    public void calcularVueltas(){
        
        String efectivo = txt_efectivo.getText();
        if(efectivo.equals("")){
            JOptionPane.showMessageDialog(null, "Ingrese el dinero recibido para calcular.");
        }else{
            String cuentaAPagar = txt_valorAPagar.getText();
            
            int efectivo_int = Integer.parseInt(efectivo); 
            int cuentaPagar_int = Integer.parseInt(cuentaAPagar);
            int cambio = cuentaPagar_int - efectivo_int ;
            
            if(cambio > 0){
                String cambio_str = String.valueOf(cambio);
                lbl_cambio.setForeground(Color.red);
                lbl_cambio.setText(cambio_str);
            }else if(cambio <= 0){
                String cambio_str = String.valueOf(cambio);
                lbl_cambio.setForeground(Color.green);
                lbl_cambio.setText(cambio_str);
            }
        }
    }
}

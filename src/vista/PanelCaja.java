package vista;

import com.sun.glass.events.KeyEvent;
import controlador.ConvenioControlador;
import controlador.FacturaControlador;
import controlador.ParametroControlador;
import controlador.ParqueaderoControlador;
import controlador.TarifaControlador;
import controlador.VehiculoControlador;
import java.awt.Color;
import javax.swing.JOptionPane;
import modelo.Parqueadero;
import java.net.URL;
import javax.swing.table.DefaultTableModel;
import modelo.Factura;
import modelo.Vehiculo;
import org.apache.log4j.Logger;


/**
 *
 * @author ALEJO
 */
public class PanelCaja extends javax.swing.JPanel{

    Parqueadero nomParqueadero;
          
    String fecha_movVehiculo;
    String user;
    String convenioParaTicket;
    String tarifaParaTicket;
    String parqParaTicket;
    
    boolean usoIngresoDesconocido = false;
    boolean usoIngresoRegistrado = false;
        
    int idParq;
    int idConvenio;
    int idTarifa;
    int consultaIdParq;
    int consultaIdConvenio;
    int consultaIdTarifa;
    int Fila;
    
    public static boolean laCajaFueAbierta = false;
    public static int numVehiculosLiquidandose = 0;
    public static String parqueadero_update;
    
    FacturaControlador facturaControla = new FacturaControlador();    
    ConvenioControlador convControla = new ConvenioControlador();
    TarifaControlador tarifaControlador = new TarifaControlador();
    ParqueaderoControlador parqControlador = new ParqueaderoControlador();
    VehiculoControlador vehControla = new VehiculoControlador();
    ParametroControlador paramControla = new ParametroControlador();
       
    private final Logger log = Logger.getLogger(PanelCaja.class);
    private URL url = PanelCaja.class.getResource("Log4j.properties");
             
    public static DefaultTableModel modeloCaja;
    
    Factura nuevaFactura = new Factura(0, "", "", "", "", "", 0, "", "", "", 0, 0, "", 0, "", "", "", "", "", "");
    
    //Declaramos un objeto tipo Parqueadero y se lo aprovisionamos a su combobox
    Parqueadero parq = new Parqueadero();   
        
    /**
     * Creates new form PanelCaja
     */
    public PanelCaja() {
        initComponents();
        user = Login.usuario;
        lbl_parqueadero.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        txt_Placa = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txt_nombrePropietario = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btn_ingresar = new javax.swing.JButton();
        cmb_numParqueadero = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_operacionParqueadero = new javax.swing.JTable();
        btn_generarCierreDeCaja = new javax.swing.JButton();
        btn_estadoParqueadero = new javax.swing.JButton();
        cmb_clase = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txt_convenio = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txt_tarifa = new javax.swing.JTextField();
        btn_abrirCaja = new javax.swing.JButton();
        lbl_parqueadero = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Placa:");

        txt_Placa.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txt_Placa.setEnabled(false);
        txt_Placa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_PlacaFocusLost(evt);
            }
        });
        txt_Placa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_PlacaActionPerformed(evt);
            }
        });
        txt_Placa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_PlacaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_PlacaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_PlacaKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Propietario:");

        txt_nombrePropietario.setEnabled(false);
        txt_nombrePropietario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nombrePropietarioActionPerformed(evt);
            }
        });
        txt_nombrePropietario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_nombrePropietarioKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Numero de Parqueadero:");

        btn_ingresar.setText("Ingresar");
        btn_ingresar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_ingresar.setEnabled(false);
        btn_ingresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ingresarActionPerformed(evt);
            }
        });

        cmb_numParqueadero.setAutoscrolls(true);
        cmb_numParqueadero.setEnabled(false);
        cmb_numParqueadero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_numParqueaderoActionPerformed(evt);
            }
        });

        table_operacionParqueadero.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Fecha", "Placa", "Propietario", "Numero de Parqueadero"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_operacionParqueadero.setEnabled(false);
        jScrollPane1.setViewportView(table_operacionParqueadero);

        btn_generarCierreDeCaja.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/IconoFactura.png"))); // NOI18N
        btn_generarCierreDeCaja.setText("Generar cierre");
        btn_generarCierreDeCaja.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_generarCierreDeCaja.setEnabled(false);
        btn_generarCierreDeCaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_generarCierreDeCajaActionPerformed(evt);
            }
        });

        btn_estadoParqueadero.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icoParking.png"))); // NOI18N
        btn_estadoParqueadero.setText("Estado de parqueadero");
        btn_estadoParqueadero.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_estadoParqueadero.setEnabled(false);
        btn_estadoParqueadero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_estadoParqueaderoActionPerformed(evt);
            }
        });

        cmb_clase.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "AUTOMOVIL", "MOTO", "ESPECIAL" }));
        cmb_clase.setEnabled(false);
        cmb_clase.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_claseItemStateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Clase:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Convenio:");

        txt_convenio.setEditable(false);
        txt_convenio.setEnabled(false);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Tarifa:");

        txt_tarifa.setEditable(false);
        txt_tarifa.setEnabled(false);

        btn_abrirCaja.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Caja.png"))); // NOI18N
        btn_abrirCaja.setText("Abrir Caja");
        btn_abrirCaja.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_abrirCaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_abrirCajaActionPerformed(evt);
            }
        });

        lbl_parqueadero.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lbl_parqueadero.setForeground(new java.awt.Color(255, 0, 0));
        lbl_parqueadero.setText("pa");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_Placa, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmb_clase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_nombrePropietario, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(btn_ingresar)
                                .addGap(54, 54, 54)
                                .addComponent(btn_abrirCaja, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_parqueadero)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(txt_convenio, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(39, 39, 39)
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(txt_tarifa, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(cmb_numParqueadero, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 24, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(451, 451, 451)
                .addComponent(btn_generarCierreDeCaja)
                .addGap(18, 18, 18)
                .addComponent(btn_estadoParqueadero)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 945, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(txt_Placa, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txt_nombrePropietario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_ingresar)
                    .addComponent(btn_abrirCaja, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(txt_tarifa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmb_clase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5)
                        .addComponent(txt_convenio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmb_numParqueadero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_parqueadero))
                .addGap(7, 7, 7)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_estadoParqueadero, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_generarCierreDeCaja, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txt_nombrePropietarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nombrePropietarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombrePropietarioActionPerformed

    //Metodo boton "Estado del parqueadero"
    private void btn_estadoParqueaderoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_estadoParqueaderoActionPerformed
        new EstadoParqueadero().setVisible(true);
        btn_estadoParqueadero.setEnabled(false);
    }//GEN-LAST:event_btn_estadoParqueaderoActionPerformed

    //Definimos la cantidad maxima de caracteres en el campo placa
    private void txt_PlacaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_PlacaKeyTyped
        
        //Cuenta la cantidad maxima de caracteres
        int numeroCaracteres = 6;
        if(txt_Placa.getText().length()== numeroCaracteres){
            evt.consume();
            JOptionPane.showMessageDialog(null,"Solo 6 caracteres");
            txt_Placa.setText("");
        }    
        //Forza aescribir en mayuscula
        char c=evt.getKeyChar();
        if(Character.isLowerCase(c)){
            evt.setKeyChar(Character.toUpperCase(c));
        }
       
    }//GEN-LAST:event_txt_PlacaKeyTyped

    private void txt_PlacaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_PlacaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_PlacaActionPerformed

    private void btn_generarCierreDeCajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_generarCierreDeCajaActionPerformed
        new CierreDeCaja().setVisible(true);
        btn_generarCierreDeCaja.setEnabled(false);        
    }//GEN-LAST:event_btn_generarCierreDeCajaActionPerformed

    //Metodo al presionar tecla esc en el campo placa
    private void txt_PlacaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_PlacaKeyPressed
        
        if(evt.getKeyCode() == KeyEvent.VK_ESCAPE){
            Limpiar();
            txt_nombrePropietario.setEditable(true);
            cmb_clase.setEnabled(true);
            cmb_numParqueadero.setEnabled(true);
            txt_Placa.setBackground(Color.WHITE);
            lbl_parqueadero.setVisible(false);
            cmb_numParqueadero.setVisible(true);
                        
        }
    }//GEN-LAST:event_txt_PlacaKeyPressed

    private void txt_PlacaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_PlacaKeyReleased
       
    }//GEN-LAST:event_txt_PlacaKeyReleased

    private void txt_PlacaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_PlacaFocusLost
        
        String placa = txt_Placa.getText();
        
        if(placa.length() == 0){}
        
        if(placa.length() >= 1 && placa.length() < 6){
            JOptionPane.showMessageDialog(null,"Placa no válida.");
            txt_Placa.requestFocus();
            txt_Placa.setText("");
        }else{
            validacionesAntesDeIngresar();
        }
             
    }//GEN-LAST:event_txt_PlacaFocusLost

    private void btn_ingresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ingresarActionPerformed
        
        if(usoIngresoDesconocido == true){
            ingresarVehiculoDesconocido();
        }if(usoIngresoRegistrado == true){
            ingresarVehiculoRegistrado();
        }
    }//GEN-LAST:event_btn_ingresarActionPerformed

    private void txt_nombrePropietarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nombrePropietarioKeyTyped
        //Forza aescribir en mayuscula
        char c=evt.getKeyChar();
        if(Character.isLowerCase(c)){
            evt.setKeyChar(Character.toUpperCase(c));
            
        }
    }//GEN-LAST:event_txt_nombrePropietarioKeyTyped

    private void cmb_numParqueaderoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_numParqueaderoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_numParqueaderoActionPerformed

    private void cmb_claseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_claseItemStateChanged
        
        if(cmb_clase.isEnabled()){
            String tipVehi_string = (String)cmb_clase.getSelectedItem();
            
            if(tipVehi_string.equals("Seleccione")){
                txt_convenio.setText("");
                txt_tarifa.setText("");
                
            } else if(tipVehi_string.equals("AUTOMOVIL")){
                txt_convenio.setText("NINGUNO");
                txt_tarifa.setText("TARIF_AUTOMOVIL");
                
            } else if(tipVehi_string.equals("MOTO")){
                txt_convenio.setText("NINGUNO");
                txt_tarifa.setText("TARIF_MOTO");
            
            } else if(tipVehi_string.equals("ESPECIAL")){
                txt_convenio.setText("NINGUNO");
                txt_tarifa.setText("TARIF_PREFERENCIAL");
            }
        }        
    }//GEN-LAST:event_cmb_claseItemStateChanged

    private void btn_abrirCajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_abrirCajaActionPerformed
        
        int decision = JOptionPane.showConfirmDialog(this, "¿Desea aperturar la Caja?.", "Apertura de caja", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                            
        //Aperturamos la caja
        if(decision == JOptionPane.YES_OPTION){
        
            int decision_conteoDeCaja = JOptionPane.showConfirmDialog(this, "¿Desea realizar un arqueo de caja?.", "Arqueo de caja", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            
            if(decision_conteoDeCaja == JOptionPane.YES_OPTION){
                
                //Se abre el jFrame para realizar el arqueo de caja
                new ArqueoDeCaja().setVisible(true);
            
            }          
        }             
    }//GEN-LAST:event_btn_abrirCajaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btn_abrirCaja;
    public static javax.swing.JButton btn_estadoParqueadero;
    public static javax.swing.JButton btn_generarCierreDeCaja;
    public static javax.swing.JButton btn_ingresar;
    private javax.swing.ButtonGroup buttonGroup1;
    public static javax.swing.JComboBox<String> cmb_clase;
    public static javax.swing.JComboBox<String> cmb_numParqueadero;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbl_parqueadero;
    public static javax.swing.JTable table_operacionParqueadero;
    public static javax.swing.JTextField txt_Placa;
    public static javax.swing.JTextField txt_convenio;
    public static javax.swing.JTextField txt_nombrePropietario;
    public static javax.swing.JTextField txt_tarifa;
    // End of variables declaration//GEN-END:variables
   
    
    //Metodo que verfica si el vehiculo ya ingreso a parqueadero 
    public void validacionesAntesDeIngresar(){
        
        String placa = txt_Placa.getText().trim();

        if(placa.length() == 0){
        }else if(placa.length() >= 1 && placa.length() < 6){
            JOptionPane.showMessageDialog(null,"Placa no válida.");
            txt_Placa.requestFocus();
        }
        else{
            
            boolean elVehiculoSeEncuentraEnParqueadero = vehControla.verificarSiVehiculoEstaEnParqueadero(placa);
            
            if(elVehiculoSeEncuentraEnParqueadero == true){
                
                txt_Placa.setBackground(Color.green);
                int decisionLiquidacion = JOptionPane.showConfirmDialog(this, "El vehiculo indicado ya se encuentra en el parqueadero, ¿Generar Liquidación?", "Liquidar vehiculo", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                if(decisionLiquidacion == JOptionPane.YES_OPTION){ 
                    generarLiquidacion();
                    txt_Placa.setBackground(Color.WHITE);
                    Limpiar();
                }else if(decisionLiquidacion == JOptionPane.NO_OPTION){
                    Limpiar();
                    txt_Placa.requestFocus();
                }
                
                Limpiar();
                Normalizar();
                
            }else{
                
                boolean elvehiculoYaEstapreviamenteRegistrado = vehControla.evaluarExistenciaDelVehiculo(placa);
                
                if(elvehiculoYaEstapreviamenteRegistrado == true){
                
                    int decision = JOptionPane.showConfirmDialog(this, "El vehiculo está registrado, ¿Generar ingreso?", "Ingresar vehiculo", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                            
                    //Obtenemos los datos del vehiculo registrado
                    if(decision == JOptionPane.YES_OPTION){  
                        
                        Vehiculo vehiculoRegistrado = vehControla.consultarInformacionDeUnVehiculo(placa);

                        txt_nombrePropietario.setText(vehiculoRegistrado.getPropietario());
                        cmb_clase.setSelectedItem(vehiculoRegistrado.getClase());

                        idParq = vehiculoRegistrado.getId_parqueadero();
                        idConvenio = vehiculoRegistrado.getId_convenio();
                        idTarifa = vehiculoRegistrado.getId_tarifa();

                        txt_nombrePropietario.setEditable(false);
                        cmb_clase.setEnabled(false);
                        cmb_numParqueadero.setVisible(false);
                        lbl_parqueadero.setVisible(true);

                        usoIngresoRegistrado = true;
                        usoIngresoDesconocido = false;

                        lbl_parqueadero.setText(parqControlador.consultarNombreDeParqueaderoMedianteID(idParq));
                        txt_convenio.setText(convControla.consultarNombreDeConvenioMedianteID(idConvenio));
                        txt_tarifa.setText(tarifaControlador.consultarNombreDeTarifaMedianteID(idTarifa));

                    }else if(decision == JOptionPane.NO_OPTION){
                        Limpiar();
                        txt_Placa.requestFocus();
                    }
                
                }else{
                    JOptionPane.showMessageDialog(null, "Vehiculo desconocido.");
                    LimpiezaSinPlaca();
                    txt_nombrePropietario.setEditable(true);
                    cmb_clase.setEnabled(true);
                    cmb_numParqueadero.setVisible(true);
                    cmb_numParqueadero.setEnabled(true);
                    lbl_parqueadero.setVisible(false);

                    usoIngresoDesconocido = true;
                    usoIngresoRegistrado = false;
                }            
            }
        }
    }
    
    //Metodo que ingresa vehiculos no registrados en el sistema al parqueadero
    public void ingresarVehiculoDesconocido(){
                
        boolean ventanaEmergCopiaIngresoVehiculoDesconocido = false;
        
        int clase_cmb,  validacion = 0;
        String placa, dueño = "";
        String clase_string = "";
        
        placa = txt_Placa.getText().trim();
        dueño = txt_nombrePropietario.getText().trim();
        String convenioAAplicar = txt_convenio.getText().trim();
        String tarifaAAplicar = txt_tarifa.getText().trim();
        clase_cmb = cmb_clase.getSelectedIndex();
        
        //Creamos un objeto de la clase modelo Parqueadero con lo seleccionado en el combobox de n° parqueadero
        nomParqueadero = (Parqueadero)cmb_numParqueadero.getSelectedItem(); 

        int validoParqueadero = nomParqueadero.getId();
        int minimoCaracteres = 6;
        

        if(placa.equals("")){
            txt_Placa.setBackground(Color.red);
            validacion++;
        }
        if(dueño.equals("")){
            txt_nombrePropietario.setBackground(Color.red);
            validacion++;
        }  

        if(clase_cmb == 0){
            clase_string = "Seleccione";
            cmb_clase.setBackground(Color.red);
            validacion++;
        } else if(clase_cmb == 1){
            clase_string = "AUTOMOVIL";
        }else if(clase_cmb == 2){
            clase_string = "MOTO";
        }else if(clase_cmb == 3){
            clase_string = "ESPECIAL";
        }

        if(validoParqueadero==0){
            cmb_numParqueadero.setBackground(Color.red);
            validacion++;
        }

        if(txt_Placa.getText().length() < minimoCaracteres){
            txt_Placa.setBackground(Color.red);
            JOptionPane.showMessageDialog(null,"Placa no válida.");
            txt_Placa.setText("");
            txt_Placa.requestFocus();
            validacion++;
        }   
        
        boolean elParqSeleccionadoEstaOcupado = parqControlador.consultarDisponibilidadDeParqueaderoMedianteID(validoParqueadero);
        
        if(elParqSeleccionadoEstaOcupado ==  true){
            cmb_numParqueadero.setBackground(Color.red);
            JOptionPane.showMessageDialog(null, "El parqueadero indicado se encuentra ocupado.");
            cmb_numParqueadero.setSelectedIndex(0);
            
        }else{
            
            if(validacion == 0){
                
                nuevaFactura.setId(0);
                nuevaFactura.setCodigo("FAC" + paramControla.generarConsecutivo(10));
                nuevaFactura.setFechaDeFactura(facturaControla.fecha_de_factura());
                nuevaFactura.setPlaca(placa);
                nuevaFactura.setPropietario(dueño);
                nuevaFactura.setClaseDeVehiculo(clase_string);
                nuevaFactura.setId_parqueadero(validoParqueadero);
                nuevaFactura.setFacturadoPor(user);
                nuevaFactura.setEstadoDeFactura("Abierta");
                nuevaFactura.setEstaContabilizada("No");
                nuevaFactura.setId_convenio(convControla.consultarIdDeunConvenio(convenioAAplicar));
                nuevaFactura.setId_tarifa(tarifaControlador.consultarIdDeunaTarifa(tarifaAAplicar));
                nuevaFactura.setFechaDeIngresoVehiculo(facturaControla.fecha_Ingresovehiculo());
                nuevaFactura.setId_cierre(1);
                
                //Creamos el objeto Factura
                facturaControla.crearFactura(nuevaFactura);
                
                //Ocupamos el parqueadero con la info del vehiculo facturado
                parqControlador.actualizarEstadoDeParqueadero(placa, dueño, nuevaFactura.getId_parqueadero(), "Si");

                Object[] fila = new Object[4];
                fila[0] = facturaControla.fecha_de_factura();
                fila[1] = placa;
                fila[2] = dueño;
                fila[3] = parqControlador.consultarNombreDeParqueaderoMedianteID(validoParqueadero);

                modeloCaja.addRow(fila);
                                
                txt_Placa.setBackground(Color.green);
                txt_nombrePropietario.setBackground(Color.green);
                cmb_clase.setBackground(Color.green);
                cmb_numParqueadero.setBackground(Color.green);
                txt_convenio.setBackground(Color.green);
                txt_tarifa.setBackground(Color.green);
                
                facturaControla.generarTicketIngreso(placa, Boolean.FALSE);
                
                ventanaEmergCopiaIngresoVehiculoDesconocido = true;

                while(ventanaEmergCopiaIngresoVehiculoDesconocido == true){
                   String botones[] = {"Imprimir copia", "Cerrar"};
                   //El segundo atributo numerico (el numero 1)representa el icono de tipo de mensaje, es decir puede ser informativo de advertencia de error o sin icono
                   int eleccionFinalizarArqueo = JOptionPane.showOptionDialog(this, "Vehiculo ingresado satisfactoriamente.", "Ingreso de vehiculo", 0, 1, null, botones, this);

                   if(eleccionFinalizarArqueo == JOptionPane.YES_OPTION){
                       facturaControla.generarTicketIngreso(placa, Boolean.FALSE); 
                   }

                   if(eleccionFinalizarArqueo == JOptionPane.NO_OPTION){
                       ventanaEmergCopiaIngresoVehiculoDesconocido = false;
                       Limpiar();
                       Normalizar();
                   }
                }
                                            
            }else{
                JOptionPane.showMessageDialog(null, "Debes de llenar todos los campos.");
                Normalizar(); 
            }
        }   
    }
    
    public void ingresarVehiculoRegistrado(){
                
        boolean ventanaEmergCopiaIngresoVehiculoRegistrado = false;
        
        int parqueaderos_cmb, clase_cmb,  validacion = 0;
        String placa, dueño, clase_string = "";

        placa = txt_Placa.getText().trim();
        dueño = txt_nombrePropietario.getText().trim();
        clase_cmb = cmb_clase.getSelectedIndex();
        
        int minimoCaracteres = 6;

        if(placa.equals("")){
            txt_Placa.setBackground(Color.red);
            validacion++;
        }
        if(dueño.equals("")){
            txt_nombrePropietario.setBackground(Color.red);
            validacion++;
        }  

        if(clase_cmb == 0){
            clase_string = "Seleccione";
            cmb_clase.setBackground(Color.red);
            validacion++;
        }        
        else if(clase_cmb == 1){
            clase_string = "AUTOMOVIL";
        }else if(clase_cmb == 2){
            clase_string = "MOTO";
        }

        if(txt_Placa.getText().length() < minimoCaracteres){
            txt_Placa.setBackground(Color.red);
            JOptionPane.showMessageDialog(null,"Placa no válida.");
            txt_Placa.setText("");
            txt_Placa.requestFocus();
            validacion++;
        }   
       
        boolean elVehiculoTieneUnaFacturaciónAbierta = vehControla.consultarSiVehiculoTieneFacturasAbiertas(placa);
        
        if(elVehiculoTieneUnaFacturaciónAbierta == true){
            txt_Placa.setBackground(Color.red);
            JOptionPane.showMessageDialog(null, "El vehiculo ya ingresó previamente al parqueadero.");
            Limpiar();
            Normalizar();
        }else{
            
            if(validacion == 0){
                
                nuevaFactura.setId(0);
                nuevaFactura.setCodigo("FAC" + paramControla.generarConsecutivo(10));
                nuevaFactura.setFechaDeFactura(facturaControla.fecha_de_factura());
                nuevaFactura.setPlaca(placa);
                nuevaFactura.setPropietario(dueño);
                nuevaFactura.setClaseDeVehiculo(clase_string);
                nuevaFactura.setId_parqueadero(idParq);
                nuevaFactura.setFacturadoPor(user);
                nuevaFactura.setEstadoDeFactura("Abierta");
                nuevaFactura.setEstaContabilizada("No");
                nuevaFactura.setId_convenio(idConvenio);
                nuevaFactura.setId_tarifa(idTarifa);
                nuevaFactura.setFechaDeIngresoVehiculo(facturaControla.fecha_Ingresovehiculo());
                nuevaFactura.setId_cierre(1);
                
                //Creamos el objeto Factura
                facturaControla.crearFactura(nuevaFactura);
                
                //Ocupamos el parqueadero con la info del vehiculo facturado
                parqControlador.actualizarEstadoDeParqueadero(placa, dueño, nuevaFactura.getId_parqueadero(), "Si");

                Object[] fila = new Object[4];
                fila[0] = facturaControla.fecha_de_factura();
                fila[1] = placa;
                fila[2] = dueño;
                fila[3] = parqControlador.consultarNombreDeParqueaderoMedianteID(idParq);

                modeloCaja.addRow(fila);
                
                txt_Placa.setBackground(Color.green);
                txt_nombrePropietario.setBackground(Color.green);
                cmb_clase.setBackground(Color.green);
                txt_convenio.setBackground(Color.green);
                txt_tarifa.setBackground(Color.green);
            
                facturaControla.generarTicketIngreso(placa, false);
                
                ventanaEmergCopiaIngresoVehiculoRegistrado = true;

                while(ventanaEmergCopiaIngresoVehiculoRegistrado == true){
                    String botones[] = {"Imprimir copia", "Cerrar"};
                    //El segundo atributo numerico (el numero 1)representa el icono de tipo de mensaje, es decir puede ser informativo de advertencia de error o sin icono
                    int eleccionFinalizarArqueo = JOptionPane.showOptionDialog(this, "Vehiculo ingresado satisfactoriamente.", "Ingreso de vehiculo", 0, 1, null, botones, this);

                    if(eleccionFinalizarArqueo == JOptionPane.YES_OPTION){
                        facturaControla.generarTicketIngreso(placa, false); 
                    }

                    if(eleccionFinalizarArqueo == JOptionPane.NO_OPTION){
                        ventanaEmergCopiaIngresoVehiculoRegistrado = false;
                        Normalizar();
                        Limpiar();
                    }
                }              
                                
                cmb_numParqueadero.setVisible(true);
                cmb_numParqueadero.setEnabled(true);
                cmb_clase.setEnabled(true);
                lbl_parqueadero.setText("");
                lbl_parqueadero.setVisible(false);
                
            }else {
                JOptionPane.showMessageDialog(null, "Debes de llenar todos los campos.");
                Normalizar();
            }      
        }
    }  
     
    //Metodo que limpia el formulario
    public void Limpiar(){
        txt_Placa.setText("");
        txt_nombrePropietario.setText("");
        cmb_clase.setSelectedIndex(0);
        cmb_numParqueadero.setSelectedIndex(0);
        txt_convenio.setText("");
        txt_tarifa.setText("");
    }
    
    public void LimpiezaSinPlaca(){
        txt_nombrePropietario.setText("");
        cmb_clase.setSelectedIndex(0);
        cmb_numParqueadero.setSelectedIndex(0);
        txt_convenio.setText("");
        txt_tarifa.setText("");
    }
    
    //Metodo que normaliza el formulario
    public void Normalizar(){
        txt_Placa.setBackground(Color.WHITE);
        txt_nombrePropietario.setBackground(Color.WHITE);
        cmb_clase.setBackground(Color.WHITE);
        cmb_numParqueadero.setBackground(Color.WHITE);
        txt_convenio.setBackground(Color.WHITE);
        txt_tarifa.setBackground(Color.WHITE);
    }
     
    //Metodo que bloquea el panel
    public static void desbloquearPanel(){
        btn_abrirCaja.setEnabled(false);
        txt_Placa.setEnabled(true);
        txt_nombrePropietario.setEnabled(true);
        cmb_clase.setEnabled(true);
        txt_convenio.setEnabled(true);
        txt_tarifa.setEnabled(true);
        table_operacionParqueadero.setEnabled(true);
        btn_estadoParqueadero.setEnabled(true);
        btn_generarCierreDeCaja.setEnabled(true);
        btn_ingresar.setEnabled(true);
        cmb_numParqueadero.setEnabled(true);

    }
        
    //Metodo que genera la liquidacion de una vehiculo desde su busqueda en el panel de caja
    public void generarLiquidacion(){

        if(numVehiculosLiquidandose > 0){
            JOptionPane.showMessageDialog(null,"No permitido.");
        }else{
            numVehiculosLiquidandose++;
            parqueadero_update = txt_Placa.getText();
            new LiquidacionVehiculo().setVisible(true);
        }    
    } 
}




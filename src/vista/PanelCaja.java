package vista;

import clasesDeApoyo.Conexion;
import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Convenio;
import modelo.Parqueadero;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import static vista.LiquidacionVehiculo.lbl_convenio;
import static vista.LiquidacionVehiculo.lbl_tarifa;
import java.net.URL;
import org.apache.log4j.Logger;

/**
 *
 * @author ALEJO
 */
public class PanelCaja extends javax.swing.JPanel implements Runnable {

    Parqueadero nomParqueadero;
    Convenio nomConvenio;
   
    String fecha_factura;
    String fecha_movVehiculo;
    String user;
    String convenioParaTicket;
    String tarifaParaTicket;
    String parqParaTicket;
    
    boolean usoIngresoDesconocido = false;
    boolean usoIngresoRegistrado = false;
        
    int idParq;
    int idConvenio;
    int idTarifa;
    int consultaIdParq;
    int consultaIdConvenio;
    int consultaIdTarifa;
    int Fila;
    
    public static boolean laCajaFueAbierta = false;
    public static boolean hayVehiculoLiquidandose = false;
    public static String parqueadero_update;
    public static DefaultTableModel modelo;
    public static int contadorFacturas;
    
    private final Logger log = Logger.getLogger(PanelCaja.class);
    private URL url = PanelCaja.class.getResource("Log4j.properties");
    
    
    //Declaramos un objeto tipo Parqueadero y se lo aprovisionamos a su combobox
    Parqueadero parq = new Parqueadero();
    
    //Hilos que mantienen el actualizadas las facturas y el estado del parqueadero en tiempo real
    Thread hilo1;
    Thread hilo2;
        
    /**
     * Creates new form PanelCaja
     */
    public PanelCaja() {
        initComponents();
        user = Login.usuario;
        lbl_parqueadero.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        txt_Placa = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txt_nombrePropietario = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btn_ingresar = new javax.swing.JButton();
        cmb_numParqueadero = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_operacionParqueadero = new javax.swing.JTable();
        btn_cierrePDF = new javax.swing.JButton();
        btn_estadoParqueadero = new javax.swing.JButton();
        cmb_clase = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txt_convenio = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txt_tarifa = new javax.swing.JTextField();
        btn_abrirCaja = new javax.swing.JButton();
        lbl_parqueadero = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Placa:");

        txt_Placa.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txt_Placa.setEnabled(false);
        txt_Placa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_PlacaFocusLost(evt);
            }
        });
        txt_Placa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_PlacaActionPerformed(evt);
            }
        });
        txt_Placa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_PlacaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_PlacaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_PlacaKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Propietario:");

        txt_nombrePropietario.setEnabled(false);
        txt_nombrePropietario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nombrePropietarioActionPerformed(evt);
            }
        });
        txt_nombrePropietario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_nombrePropietarioKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Numero de Parqueadero:");

        btn_ingresar.setText("Ingresar");
        btn_ingresar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_ingresar.setEnabled(false);
        btn_ingresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ingresarActionPerformed(evt);
            }
        });

        cmb_numParqueadero.setAutoscrolls(true);
        cmb_numParqueadero.setEnabled(false);
        cmb_numParqueadero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_numParqueaderoActionPerformed(evt);
            }
        });

        table_operacionParqueadero.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Fecha", "Placa", "Propietario", "Hora de Ingreso", "Numero de Parqueadero"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_operacionParqueadero.setEnabled(false);
        jScrollPane1.setViewportView(table_operacionParqueadero);

        btn_cierrePDF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/generarPDF.png"))); // NOI18N
        btn_cierrePDF.setText("Generar Cierre PDF");
        btn_cierrePDF.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_cierrePDF.setEnabled(false);
        btn_cierrePDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cierrePDFActionPerformed(evt);
            }
        });

        btn_estadoParqueadero.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icoParking.png"))); // NOI18N
        btn_estadoParqueadero.setText("Estado de Parqueadero");
        btn_estadoParqueadero.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_estadoParqueadero.setEnabled(false);
        btn_estadoParqueadero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_estadoParqueaderoActionPerformed(evt);
            }
        });

        cmb_clase.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "AUTOMOVIL", "MOTO" }));
        cmb_clase.setEnabled(false);
        cmb_clase.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_claseItemStateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Clase:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Convenio:");

        txt_convenio.setEditable(false);
        txt_convenio.setEnabled(false);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Tarifa:");

        txt_tarifa.setEditable(false);
        txt_tarifa.setEnabled(false);

        btn_abrirCaja.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Caja.png"))); // NOI18N
        btn_abrirCaja.setText("Abrir Caja");
        btn_abrirCaja.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_abrirCaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_abrirCajaActionPerformed(evt);
            }
        });

        lbl_parqueadero.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lbl_parqueadero.setForeground(new java.awt.Color(255, 0, 0));
        lbl_parqueadero.setText("pa");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_Placa, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmb_clase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbl_parqueadero)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmb_numParqueadero, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(37, 37, 37)
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(txt_convenio, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(txt_tarifa, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(26, 26, 26)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txt_nombrePropietario, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(26, 26, 26)
                                        .addComponent(btn_ingresar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btn_abrirCaja, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 945, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 16, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(451, 451, 451)
                .addComponent(btn_cierrePDF)
                .addGap(18, 18, 18)
                .addComponent(btn_estadoParqueadero)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(txt_Placa, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txt_nombrePropietario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_ingresar)
                    .addComponent(btn_abrirCaja, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(txt_tarifa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(cmb_numParqueadero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmb_clase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5)
                        .addComponent(txt_convenio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbl_parqueadero)))
                .addGap(30, 30, 30)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_estadoParqueadero, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_cierrePDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txt_nombrePropietarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nombrePropietarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombrePropietarioActionPerformed

    //Metodo boton "Estado del parqueadero"
    private void btn_estadoParqueaderoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_estadoParqueaderoActionPerformed
        new EstadoParqueadero().setVisible(true);
        btn_estadoParqueadero.setEnabled(false);
    }//GEN-LAST:event_btn_estadoParqueaderoActionPerformed

    //Definimos la cantidad maxima de caracteres en el campo placa
    private void txt_PlacaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_PlacaKeyTyped
        
        //Cuenta la cantidad maxima de caracteres
        int numeroCaracteres = 6;
        if(txt_Placa.getText().length()== numeroCaracteres){
            evt.consume();
            JOptionPane.showMessageDialog(null,"Solo 6 caracteres");
            txt_Placa.setText("");
        }    
        //Forza aescribir en mayuscula
        char c=evt.getKeyChar();
        if(Character.isLowerCase(c)){
            evt.setKeyChar(Character.toUpperCase(c));
        }
       
    }//GEN-LAST:event_txt_PlacaKeyTyped

    private void txt_PlacaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_PlacaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_PlacaActionPerformed

    private void btn_cierrePDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cierrePDFActionPerformed
        new CuadreCaja().setVisible(true);
    }//GEN-LAST:event_btn_cierrePDFActionPerformed

    //Metodo al presionar tecla esc en el campo placa
    private void txt_PlacaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_PlacaKeyPressed
        
        if(evt.getKeyCode() == KeyEvent.VK_ESCAPE){
            Limpiar();
            txt_nombrePropietario.setEditable(true);
            cmb_clase.setEnabled(true);
            cmb_numParqueadero.setEnabled(true);
            txt_Placa.setBackground(Color.WHITE);
                        
        }
    }//GEN-LAST:event_txt_PlacaKeyPressed

    private void txt_PlacaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_PlacaKeyReleased
       
    }//GEN-LAST:event_txt_PlacaKeyReleased

    private void txt_PlacaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_PlacaFocusLost
        
        String placa = txt_Placa.getText();
        
        if(placa.length() == 0){}
        
        if(placa.length() >= 1 && placa.length() < 6){
            JOptionPane.showMessageDialog(null,"Placa no válida.");
            txt_Placa.requestFocus();
            txt_Placa.setText("");
        }else{
            validacionesAntesDeIngresar();
        }
             
    }//GEN-LAST:event_txt_PlacaFocusLost

    private void btn_ingresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ingresarActionPerformed
        
        if(usoIngresoDesconocido == true){
            ingresarVehiculoDesconocido();
        }if(usoIngresoRegistrado == true){
            ingresarVehiculoRegistrado();
        }
    }//GEN-LAST:event_btn_ingresarActionPerformed

    private void txt_nombrePropietarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nombrePropietarioKeyTyped
        //Forza aescribir en mayuscula
        char c=evt.getKeyChar();
        if(Character.isLowerCase(c)){
            evt.setKeyChar(Character.toUpperCase(c));
            
        }
    }//GEN-LAST:event_txt_nombrePropietarioKeyTyped

    private void cmb_numParqueaderoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_numParqueaderoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_numParqueaderoActionPerformed

    private void cmb_claseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_claseItemStateChanged
        
        if(cmb_clase.isEnabled()){
            String tipVehi_string = (String)cmb_clase.getSelectedItem();
            
            if(tipVehi_string.equals("Seleccione")){
                txt_convenio.setText("");
                txt_tarifa.setText("");
                
            } else if(tipVehi_string.equals("AUTOMOVIL")){
                txt_convenio.setText("NINGUNO");
                txt_tarifa.setText("TARIF_AUTOMOVIL");
                
            } else if(tipVehi_string.equals("MOTO")){
                txt_convenio.setText("NINGUNO");
                txt_tarifa.setText("TARIF_MOTO");
            }
        }        
    }//GEN-LAST:event_cmb_claseItemStateChanged

    private void btn_abrirCajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_abrirCajaActionPerformed
        
        int decision = JOptionPane.showConfirmDialog(this, "Desea aperturar la Caja?.", "Abrir Caja", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                            
        //Aperuramos la caja
        if(decision == JOptionPane.YES_OPTION){
            desbloquearPanel();
            
            laCajaFueAbierta = true;
            contadorFacturas = 0;            
            
            hilo1 = new Thread(this);
            hilo1.start();
            
            hilo2 = new Thread(this);
            hilo2.start();
            
           
            //Agregamos la funcion de liquidar vehiculo al hacer click sobre el registro de la tabla
            table_operacionParqueadero.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e){
                int fila_point = table_operacionParqueadero.rowAtPoint(e.getPoint());
                int columna_point = 1;

                if(fila_point > -1){
                    parqueadero_update = (String) modelo.getValueAt(fila_point, columna_point);
                    
                    if(hayVehiculoLiquidandose == true){
                        JOptionPane.showMessageDialog(null,"No permitido.");
                    }else{
                       hayVehiculoLiquidandose = true;  
                       LiquidacionVehiculo liquidacion_vehiculo = new LiquidacionVehiculo();
                       liquidacion_vehiculo.setVisible(true);
                    }
                    
                }
            }
        });
        }else if(decision == JOptionPane.NO_OPTION){                                                                                                                          
        
        }                       
        
    }//GEN-LAST:event_btn_abrirCajaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btn_abrirCaja;
    public static javax.swing.JButton btn_cierrePDF;
    public static javax.swing.JButton btn_estadoParqueadero;
    public static javax.swing.JButton btn_ingresar;
    private javax.swing.ButtonGroup buttonGroup1;
    public static javax.swing.JComboBox<String> cmb_clase;
    public static javax.swing.JComboBox<String> cmb_numParqueadero;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbl_parqueadero;
    public static javax.swing.JTable table_operacionParqueadero;
    public static javax.swing.JTextField txt_Placa;
    public static javax.swing.JTextField txt_convenio;
    public static javax.swing.JTextField txt_nombrePropietario;
    public static javax.swing.JTextField txt_tarifa;
    // End of variables declaration//GEN-END:variables
   
    
    //Metodo que verfica si el vehiculo ya ingreso a parqueadero 
    public void validacionesAntesDeIngresar(){
        
        String placa = txt_Placa.getText().trim();

        if(placa.length() == 0){
        }else if(placa.length() >= 1 && placa.length() < 6){
            JOptionPane.showMessageDialog(null,"Placa no válida.");
            txt_Placa.requestFocus();
        }
        else{
            //Validamos que el vehiculo no se encuentre en el parqueadero
            try {
                Connection cn = Conexion.conectar();
                PreparedStatement pst;
                pst = cn.prepareStatement(
                            "select Placa, Esta_en_parqueadero from parqueaderos where Placa = '"+placa+"' AND Esta_en_parqueadero='Si'");

                ResultSet rs = pst.executeQuery();
                ResultSetMetaData rsmd = rs.getMetaData();
                int cantidadColumnas = rsmd.getColumnCount();

                if (rs.next()) {
                    txt_Placa.setBackground(Color.green);
                    int decisionLiquidacion = JOptionPane.showConfirmDialog(this, "El vehiculo indicado ya se encuentra en el parqueadero, ¿Generar Liquidación?", "Liquidar vehiculo", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    
                    
                    if(decisionLiquidacion == JOptionPane.YES_OPTION){ 
                        
                        generarLiquidacion(placa);
                        txt_Placa.setBackground(Color.WHITE);
                        Limpiar();
                        
                    }else if(decisionLiquidacion == JOptionPane.NO_OPTION){
                        Limpiar();
                        txt_Placa.requestFocus();
                        cn.close();
                    }
                                       
                    cn.close();
                    Limpiar();
                    Normalizar();
                }else{
                    //Valida si el vehiculo esta registrado
                    try {
                        Connection cn1 = Conexion.conectar();
                        PreparedStatement pst1;
                        pst1 = cn1.prepareStatement(
                                    "select Propietario, Clase, Id_parqueadero, Id_convenio, Id_tarifa from vehiculos where Placa = '"+placa+"'");

                        ResultSet rs1 = pst1.executeQuery();

                        if (rs1.next()) {

                            int decision = JOptionPane.showConfirmDialog(this, "El vehiculo está registrado, ¿Generar ingreso?", "Ingresar vehiculo", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                            
                            //Obtenemos los datos del vehiculo registrado
                            if(decision == JOptionPane.YES_OPTION){                                                                                                                             
                                                              
                                txt_nombrePropietario.setText(rs1.getString("Propietario"));
                                cmb_clase.setSelectedItem(rs1.getString("Clase"));
                                
                                idParq= rs1.getInt("Id_parqueadero");
                                idConvenio = rs1.getInt("Id_convenio");
                                idTarifa = rs1.getInt("Id_tarifa");
                                
                                txt_nombrePropietario.setEditable(false);
                                cmb_clase.setEnabled(false);
                                cmb_numParqueadero.setVisible(false);
                                lbl_parqueadero.setVisible(true);
                                
                                usoIngresoRegistrado = true;
                                usoIngresoDesconocido = false;
                                
                                cargarNoParqueadero(idParq);
                                cargarNombreConvenio(idConvenio);
                                cargarNombreTarifa(idTarifa);
                               
                            }else if(decision == JOptionPane.NO_OPTION){
                                Limpiar();
                                txt_Placa.requestFocus();
                                cn1.close();
                            }
                        }else{
                            JOptionPane.showMessageDialog(null, "Vehiculo desconocido.");
                            LimpiezaSinPlaca();
                            txt_nombrePropietario.setEditable(true);
                            cmb_clase.setEnabled(true);
                            cmb_numParqueadero.setVisible(true);
                            cmb_numParqueadero.setEnabled(true);
                            lbl_parqueadero.setVisible(false);
                            
                            usoIngresoDesconocido = true;
                            usoIngresoRegistrado = false;
                        }

                    }catch (SQLException e) {
                        JOptionPane.showMessageDialog(null, "¡¡ERROR al cargar vehiculo registrado!!, contacte al administrador.");
                    }
                }   
            }catch (SQLException e) {
               JOptionPane.showMessageDialog(null, "¡¡ERROR al checkear disponibilidad de vehiculo!!, contacte al administrador.");
            }
        }
    }
    
    //Metodo que ingresa vehiculos a parqueadero
    public void ingresarVehiculoDesconocido(){
        
        int clase_cmb,  validacion = 0;
        String placa, dueño, convenio, tarifa = "";
        String clase_string = "";
        
        //Creamos un objeto de la clase modelo Parqueadero con lo seleccionado en el combobox de n° parqueadero
        nomParqueadero = (Parqueadero)cmb_numParqueadero.getSelectedItem();     

        placa = txt_Placa.getText().trim();
        dueño = txt_nombrePropietario.getText().trim();
        convenio = txt_convenio.getText().trim();
        tarifa = txt_tarifa.getText().trim();

        clase_cmb = cmb_clase.getSelectedIndex() + 1;

        int validoParqueadero = nomParqueadero.getId();
        int minimoCaracteres = 6;

        if(placa.equals("")){
            txt_Placa.setBackground(Color.red);
            validacion++;
        }
        if(dueño.equals("")){
            txt_nombrePropietario.setBackground(Color.red);
            validacion++;
        }  

        if(clase_cmb == 1){
            clase_string = "Seleccione";
            cmb_clase.setBackground(Color.red);
            validacion++;
        } else if(clase_cmb == 2){
            clase_string = "AUTOMOVIL";
        }else if(clase_cmb == 3){
            clase_string = "MOTO";
        }

        if(validoParqueadero==0){
            cmb_numParqueadero.setBackground(Color.red);
            validacion++;
        }

        if(txt_Placa.getText().length() < minimoCaracteres){
            txt_Placa.setBackground(Color.red);
            JOptionPane.showMessageDialog(null,"Placa no válida.");
            txt_Placa.setText("");
            txt_Placa.requestFocus();
            validacion++;
        }             
        //Valida que el parqueadero indicado no se encuentre ocupado
        try {
            Connection cn5 = Conexion.conectar();
            PreparedStatement pst5;
            pst5 = cn5.prepareStatement(
                        "select Nombre_parqueadero, Estado from parqueaderos where Nombre_parqueadero = '" + nomParqueadero.getNombre() + "' AND Estado='Ocupado'");

            ResultSet rs5 = pst5.executeQuery();

        if (rs5.next()) {
            cmb_numParqueadero.setBackground(Color.red);
            JOptionPane.showMessageDialog(null, "El parqueadero indicado se encuentra ocupado.");
            cn5.close();
            cmb_numParqueadero.setSelectedIndex(0);
        } else { 

            if (validacion == 0) {
                //Inserta el registro en la base de datos
                try {               
                    Connection cn2 = Conexion.conectar();
                    PreparedStatement pst2 = cn2.prepareStatement(
                        "insert into facturas values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

                    pst2.setInt(1, 0);
                    pst2.setDouble(2, codigosFactura());
                    pst2.setString(3, fecha_de_factura());
                    pst2.setString(4, placa);
                    pst2.setString(5, dueño);
                    pst2.setString(6, clase_string);
                    pst2.setInt(7, nomParqueadero.getId());
                    pst2.setString(8, user);
                    pst2.setString(9, "Abierta");
                    pst2.setString(10, "No"); 
                    pst2.setInt(11, consultarIdConvenio(convenio));
                    pst2.setInt(12, consultarIdTarifa(tarifa));
                    pst2.setString(13, fecha_Ingresovehiculo()); 
                    pst2.setString(14, fecha_Ingresovehiculo());
                    pst2.setInt(15, 0);
                    pst2.setInt(16, 0);
                    pst2.setInt(17, 0);
                    pst2.setInt(18, 1);
                    
                    
                    pst2.executeUpdate();
                    cn2.close();
                    
                    ocuparParqueadero(placa, dueño, nomParqueadero.getId());

                    Object[] fila = new Object[5];
                    fila[0] = fecha_de_factura();
                    fila[1] = placa;
                    fila[2] = dueño;
                    fila[3] = fecha_Ingresovehiculo();
                    fila[4] = nomParqueadero.getNombre();
                    
                    modelo.addRow(fila);

                    txt_Placa.setBackground(Color.green);
                    txt_nombrePropietario.setBackground(Color.green);
                    cmb_clase.setBackground(Color.green);
                    cmb_numParqueadero.setBackground(Color.green);
                    txt_convenio.setBackground(Color.green);
                    txt_tarifa.setBackground(Color.green);

                    JOptionPane.showMessageDialog(null, "Vehiculo ingresado satisfactoriamente.");              
                    generarTicketIngreso(placa);
                    Normalizar();
                    Limpiar();

                    } catch (SQLException e) {
                        e.printStackTrace();
                        System.err.println(e);
                        JOptionPane.showMessageDialog(null, "¡¡ERROR al ingresar vehiculo desconocido!!, contacte al administrador.");
                        Limpiar();
                    }

            } else {
                JOptionPane.showMessageDialog(null, "Debes de llenar todos los campos.");
                Normalizar();
            }
        }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "¡¡ERROR al revisar cupo!!, contacte al administrador.");
        }
    }
    
    public void ingresarVehiculoRegistrado(){
        
        int parqueaderos_cmb, clase_cmb,  validacion = 0;
        String placa, dueño, clase_string = "";
        String noParq = "";

        placa = txt_Placa.getText().trim();
        dueño = txt_nombrePropietario.getText().trim();
        clase_cmb = cmb_clase.getSelectedIndex() + 1;
        
        int minimoCaracteres = 6;

        if(placa.equals("")){
            txt_Placa.setBackground(Color.red);
            validacion++;
        }
        if(dueño.equals("")){
            txt_nombrePropietario.setBackground(Color.red);
            validacion++;
        }  

        if(clase_cmb == 1){
            clase_string = "Seleccione";
            cmb_clase.setBackground(Color.red);
            validacion++;
        }        
        else if(clase_cmb == 2){
            clase_string = "AUTOMOVIL";
        }else if(clase_cmb == 3){
            clase_string = "MOTO";
        }

        if(txt_Placa.getText().length() < minimoCaracteres){
            txt_Placa.setBackground(Color.red);
            JOptionPane.showMessageDialog(null,"Placa no válida.");
            txt_Placa.setText("");
            txt_Placa.requestFocus();
            validacion++;
        }   
       
        //Valida que no exista una factura ya abierta con dicho vehiculo  
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement pst;
            pst = cn.prepareStatement(
                        "select Placa from facturas where Placa = '" + placa + "' AND Estado_fctra ='Abierta'");
            
            ResultSet rs = pst.executeQuery();
            
            if (rs.next()) {
                txt_Placa.setBackground(Color.red);
                JOptionPane.showMessageDialog(null, "El vehiculo ya ingresó al parqueadero.");
                cn.close();
                Limpiar();
                Normalizar();
            } else {  
        
                if (validacion == 0) {
                    //Inserta el registro en la base de datos
                    try {
                        Connection cn2 = Conexion.conectar();
                        PreparedStatement pst2 = cn2.prepareStatement(
                            "insert into facturas() values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

                        pst2.setInt(1, 0);
                        pst2.setInt(2, codigosFactura());
                        pst2.setString(3, fecha_de_factura());
                        pst2.setString(4, placa);
                        pst2.setString(5, dueño);
                        pst2.setString(6, clase_string);
                        pst2.setInt(7, idParq);
                        pst2.setString(8, user);
                        pst2.setString(9, "Abierta");
                        pst2.setString(10, "No"); 
                        pst2.setInt(11, idConvenio);
                        pst2.setInt(12, idTarifa);    
                        pst2.setString(13, fecha_Ingresovehiculo()); 
                        pst2.setString(14, fecha_Ingresovehiculo()); 
                        pst2.setInt(15, 0);
                        pst2.setInt(16, 0);
                        pst2.setInt(17, 0); 
                        pst2.setInt(18, 1);

                        pst2.executeUpdate();
                        cn2.close();

                        ocuparParqueadero(placa, dueño, idParq);
                
                        Object[] fila = new Object[5];
                        fila[0] = fecha_de_factura();
                        fila[1] = placa;
                        fila[2] = dueño;
                        fila[3] = fecha_Ingresovehiculo();
                        fila[4] = cargarNombreParqParaTicket(idParq);
                
                        modelo.addRow(fila);

                        txt_Placa.setBackground(Color.green);
                        txt_nombrePropietario.setBackground(Color.green);
                        cmb_clase.setBackground(Color.green);
                        txt_convenio.setBackground(Color.green);
                        txt_tarifa.setBackground(Color.green);

                        JOptionPane.showMessageDialog(null, "Vehiculo ingresado satisfactoriamente.");              
                        generarTicketIngreso(placa);
                        cmb_numParqueadero.setVisible(true);
                        cmb_numParqueadero.setEnabled(true);
                        cmb_clase.setEnabled(true);
                        lbl_parqueadero.setText("");
                        lbl_parqueadero.setVisible(false);
                        Normalizar();
                        Limpiar();
                
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(null, "¡¡ERROR al ingresar vehiculo conocido!!, contacte al administrador.");
                        Limpiar();
                    }
        
                } else {
                    JOptionPane.showMessageDialog(null, "Debes de llenar todos los campos.");
                    Normalizar();
                }
            }
        }catch (SQLException ex) {
             JOptionPane.showMessageDialog(null, "¡¡ERROR al validad factura vigente de vehiculo!!, contacte al administrador.");
        }
    }  
    
    //Metodo que genera los codigos de las facturas
    public int codigosFactura(){
        Random miAleatorio = new Random();
        int N = miAleatorio.nextInt(1000000000);
        return N;
    }
    
    //Metodo que genera la fecha en que fue generada la factura
    public String fecha_de_factura(){
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = Calendar.getInstance();
        Date date = cal.getTime();
        fecha_factura = sdf.format(date);
        return fecha_factura;
    }
            
    //Metodo que genera la fecha de entrada del vehiculo       
    public String fecha_Ingresovehiculo(){
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Calendar cal = Calendar.getInstance();
        Date date = cal.getTime();
        fecha_movVehiculo = dateFormat.format(date);
        return fecha_movVehiculo;
    }

    //Metodo que limpia el formulario
    public void Limpiar(){
        txt_Placa.setText("");
        txt_nombrePropietario.setText("");
        cmb_clase.setSelectedIndex(0);
        cmb_numParqueadero.setSelectedIndex(0);
        txt_convenio.setText("");
        txt_tarifa.setText("");
    }
    
    public void LimpiezaSinPlaca(){
        txt_nombrePropietario.setText("");
        cmb_clase.setSelectedIndex(0);
        cmb_numParqueadero.setSelectedIndex(0);
        txt_convenio.setText("");
        txt_tarifa.setText("");
    }
    
    //Metodo que normaliza el formulario
    public void Normalizar(){
        txt_Placa.setBackground(Color.WHITE);
        txt_nombrePropietario.setBackground(Color.WHITE);
        cmb_clase.setBackground(Color.WHITE);
        cmb_numParqueadero.setBackground(Color.WHITE);
        txt_convenio.setBackground(Color.WHITE);
        txt_tarifa.setBackground(Color.WHITE);
    }
    
    //Metodo que carga el nombre del convenio en el txt correspondiente
    public void cargarNombreConvenio(int variable){
        
        //Traemos el nombre del convenio 
        try {
           Connection cn3 = Conexion.conectar();
           PreparedStatement pst3;
           pst3 = cn3.prepareStatement(
                       "select Nombre_convenio from convenios where Id_convenio = '"+variable+"'");

           ResultSet rs3 = pst3.executeQuery();

           if (rs3.next()) {
               txt_convenio.setText(rs3.getString("Nombre_convenio"));
           }
       }catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "¡¡ERROR al cargar nombre del convenio!!, contacte al administrador.");
       }
    }
    
    //Metodo que carga el nombre de la tarifa en el txt correspondiente
    public void cargarNombreTarifa(int variable){
        
        //Traemos el nombre del convenio 
        try {
           Connection cn3 = Conexion.conectar();
           PreparedStatement pst3;
           pst3 = cn3.prepareStatement(
                       "select Nombre_tarifa from tarifas where Id_tarifa = '"+variable+"'");

           ResultSet rs3 = pst3.executeQuery();

           if (rs3.next()) {
               txt_tarifa.setText(rs3.getString("Nombre_tarifa"));
           }
       }catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "¡¡ERROR al cargar nombre de la tarifa!!, contacte al administrador.");

       }
    }
    
    //Metodo que carga el nombre del parqueadero con su id
    public void cargarNoParqueadero(int variable){
        
        //Traemos el nombre del convenio 
        try {
           Connection cn3 = Conexion.conectar();
           PreparedStatement pst3;
           pst3 = cn3.prepareStatement(
                       "select Nombre_parqueadero from parqueaderos where Id_parqueadero = '"+variable+"'");

           ResultSet rs3 = pst3.executeQuery();

           if (rs3.next()) {
               lbl_parqueadero.setText(rs3.getString("Nombre_parqueadero"));
           }
       }catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "¡¡ERROR al cargar nombre del parqueadero, contacte al administrador.");

       }
    }
    
    //Metodo que bloquea el panel
    public void desbloquearPanel(){
        btn_abrirCaja.setEnabled(false);
        txt_Placa.setEnabled(true);
        txt_nombrePropietario.setEnabled(true);
        cmb_clase.setEnabled(true);
        txt_convenio.setEnabled(true);
        txt_tarifa.setEnabled(true);
        table_operacionParqueadero.setEnabled(true);
        btn_estadoParqueadero.setEnabled(true);
        btn_cierrePDF.setEnabled(true);
        btn_ingresar.setEnabled(true);
        cmb_numParqueadero.setEnabled(true);

    }
    
    //Metodo que genera el ticket de ingreso
    public void generarTicketIngreso(String placaVehiculo){
        
        try{
            Connection cn3 = Conexion.conectar();
            
            //Agregamos los parametros con los cuales se generara el ticket
            Map parametros = new HashMap ();
            parametros.put("placa_vehiculo", placaVehiculo);
                     
            JasperReport reporte = null;
            //String path = "src\\Reportes\\TicketIngreso.jasper";

            reporte = (JasperReport) JRLoader.loadObject(getClass().getResource("/Reportes/TicketIngreso.jasper"));

            JasperPrint jprint = JasperFillManager.fillReport(reporte, parametros, cn3);

            //Da una vista previa del ticket
            /*
            JasperViewer view = new JasperViewer(jprint, false);
            view.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            view.setVisible(true);
            view.setTitle("Ticket de ingreso vehiculo " + placaVehiculo);
            */
            
            //Hace que se imprima directamente
            JasperPrintManager.printReport(jprint, false);
            

        }catch(JRException ex){
            //Logger.getLogger(PanelUsuarios.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "¡¡ERROR al generar Ticket de ingreso, contacte aladministrador!!");
        }
    }

    //Metodo que retorna el nombre del convenio para el ticket
    public String cargarNombreConvenioParaTicket(int variable){
        
        //Traemos el nombre del convenio 
        try {
           Connection cn3 = Conexion.conectar();
           PreparedStatement pst3;
           pst3 = cn3.prepareStatement(
                       "select Nombre_convenio from convenios where Id_convenio = '"+variable+"'");

           ResultSet rs3 = pst3.executeQuery();

           if (rs3.next()) {
               convenioParaTicket = rs3.getString("Nombre_convenio");
              
           }
       }catch (SQLException e) {
           JOptionPane.showMessageDialog(null, "Error al cargar propiedad del ticket, contacte al administrador!!!. ");
        }
         return convenioParaTicket;
    }
    
    //Metodo que retorna el nombre del tarifa para el ticket
    public String cargarNombreTarifaParaTicket(int variable){
        //Traemos el nombre del convenio 
        try {
           Connection cn3 = Conexion.conectar();
           PreparedStatement pst3;
           pst3 = cn3.prepareStatement(
                       "select Nombre_tarifa from tarifas where Id_tarifa = '"+variable+"'");

           ResultSet rs3 = pst3.executeQuery();

           if (rs3.next()) {
               tarifaParaTicket = rs3.getString("Nombre_tarifa");
              
           }
       }catch (SQLException e) {
           JOptionPane.showMessageDialog(null, "Error al cargar propiedad del ticket, contacte al administrador!!!. ");
       }
         return tarifaParaTicket;
    }
    
    
    public String cargarNombreParqParaTicket(int variable){
        //Traemos el nombre del parqueadero 
        try {
           Connection cn3 = Conexion.conectar();
           PreparedStatement pst3;
           pst3 = cn3.prepareStatement(
                       "select Nombre_parqueadero from parqueaderos where Id_parqueadero = '"+variable+"'");

           ResultSet rs3 = pst3.executeQuery();

           if (rs3.next()) {
               parqParaTicket = rs3.getString("Nombre_parqueadero");
              
           }
       }catch (SQLException e) {
           JOptionPane.showMessageDialog(null, "Error al cargar nombre del parqueadero para sistema y ticket. ");
       }
         return parqParaTicket;
    }
    
    //Pasa el parqueadero seleccionado de disponible a ocupado
    public void ocuparParqueadero(String placaV, String dueñoV, int ParqueaderoV){
        
        //Actualizamos el estado del parqueadero seleccionado de Disponible a Ocupado
        try{
            Connection cn3 = Conexion.conectar();
            PreparedStatement pst3 = cn3.prepareStatement("update parqueaderos set Estado ='Ocupado', Placa='"+placaV+"',Propietario='"+dueñoV+"',Esta_en_parqueadero='Si' where Id_parqueadero ='"+ParqueaderoV+"'");

            pst3.executeUpdate();
            cn3.close();

        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, "¡¡ERROR al actualizar estado del parqueadero!!, contacte al administrador.");
            Limpiar();
        }
    }
    
    //Metodo que ejecuta el hilo que trae los datos del estado de cupo de parqueadero en tiempo real    
    @Override
    public void run() {
        Thread ct = Thread.currentThread();
        Thread ct1 = Thread.currentThread();
            while(ct == hilo1){
                
                DefaultComboBoxModel modeloParq = new DefaultComboBoxModel(parq.mostrarParqueaderosDisponibles());
                cmb_numParqueadero.setModel(modeloParq);

                try{
                    ct.sleep(120000);
                }catch(InterruptedException e){}
            }
            while(ct1 == hilo2){
                
                //Cargamos los datos de la tabla
                try {
                    modelo = new DefaultTableModel();
                    table_operacionParqueadero.setModel(modelo);

                    Connection cn = Conexion.conectar();
                    PreparedStatement pst = cn.prepareStatement(
                                "select Fac.Fecha_factura, Fac.Placa, Fac.Propietario, Fac.Hora_ingreso, Parq.Nombre_parqueadero from facturas Fac INNER JOIN parqueaderos Parq ON Fac.No_parqueadero = Parq.Id_parqueadero AND Estado_fctra ='Abierta'");
                                 
                    ResultSet rs = pst.executeQuery();

                    ResultSetMetaData rsmd = rs.getMetaData();
                    int cantidadColumnas = rsmd.getColumnCount();

                    modelo.addColumn("Fecha");
                    modelo.addColumn("Placa");
                    modelo.addColumn("Propietario");
                    modelo.addColumn("Hora de Ingreso");
                    modelo.addColumn("Numero de Parquadero");

                    int[] anchosTabla = {10,10,15,15,5};

                    for(int x=0; x < cantidadColumnas; x++){
                        table_operacionParqueadero.getColumnModel().getColumn(x).setPreferredWidth(anchosTabla[x]);
                    }

                    while (rs.next()) {

                        Object[] filas = new Object[cantidadColumnas];

                        for (int i = 0; i < cantidadColumnas; i++) {

                                filas[i] = rs.getObject(i + 1); 
                        }
                        modelo.addRow(filas);
                    }
                    cn.close();                    
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(null, "Error al mostrar operación del Parqueadero, ¡Contacte al administrador!");
                    }
                
                try{
                    ct1.sleep(10000);
                }catch(InterruptedException e){}
            }
    }

    //Metodo que genera la liquidacion de una vehiculo desde su busqueda en el panel de caja
    public void generarLiquidacion(String placa){

        if(hayVehiculoLiquidandose == true){
            JOptionPane.showMessageDialog(null,"No permitido.");
        }else{
            hayVehiculoLiquidandose = true;
            new LiquidacionVehiculo().setVisible(true);
            //Hace la consulta del codigo,tipo de vehiculo , Facturado por, a la base de datos
            try {
                Connection cn = Conexion.conectar();
                PreparedStatement pst = cn.prepareStatement(
                    "SELECT Fac.Id_factura, Fac.Codigo, Fac.Propietario, Fac.Tipo_vehiculo, Fac.Facturado_por, Fac.Estado_fctra, Fac.Hora_ingreso, Parq.Nombre_parqueadero, Conv.Nombre_convenio, Tar.Nombre_tarifa from facturas Fac INNER JOIN parqueaderos Parq ON Fac.No_parqueadero = Parq.Id_parqueadero INNER JOIN convenios Conv ON Fac.Id_convenio = Conv.Id_convenio INNER JOIN tarifas Tar ON Fac.Id_tarifa = Tar.Id_tarifa AND Fac.Placa = '" + placa + "' AND Fac.Estado_fctra = 'Abierta'");

                ResultSet rs = pst.executeQuery();

                if(rs.next()){
                    LiquidacionVehiculo.ID = rs.getInt("Fac.Id_factura");
                    LiquidacionVehiculo.lbl_codigo.setText(rs.getString("Fac.Codigo"));
                    LiquidacionVehiculo.lbl_placa.setText(placa);
                    LiquidacionVehiculo.lbl_propietario.setText(rs.getString("Fac.Propietario"));
                    LiquidacionVehiculo.lbl_tipoVehiculo.setText(rs.getString("Fac.Tipo_vehiculo"));
                    LiquidacionVehiculo.lbl_noParqueadero.setText(rs.getString("Parq.Nombre_parqueadero"));
                    LiquidacionVehiculo.lbl_facturadoPor.setText(rs.getString("Fac.Facturado_por"));
                    LiquidacionVehiculo.lbl_convenio.setText(rs.getString("Conv.Nombre_convenio"));
                    LiquidacionVehiculo.lbl_tarifa.setText(rs.getString("Tar.Nombre_tarifa"));
                    LiquidacionVehiculo.lbl_horaIngreso.setText(rs.getString("Fac.Hora_ingreso"));
                }  
                cn.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "¡¡ERROR al cargar liquidación de vehiculo!!, contacte al administrador.");
            }

            LiquidacionVehiculo.lbl_horaSalida.setText(LiquidacionVehiculo.fecha_Salidavehiculo());

            String tarifa = lbl_tarifa.getText();
            String convenio = lbl_convenio.getText();
            LiquidacionVehiculo.calcularTarifa(convenio, tarifa);
        }    
    }
    
    //Metodo que consulta el Id del parqueadero teniendo en cuenta su nombre
    public int consultarIdParqueadero(String variable){
        
        //Traemos el id del parq 
        try {
           Connection cn4 = Conexion.conectar();
           PreparedStatement pst4;
           pst4 = cn4.prepareStatement(
                       "select Id_parqueadero from convenios where Nombre_parqueadero = '"+variable+"'");

           ResultSet rs4 = pst4.executeQuery();

           if (rs4.next()) {
                consultaIdParq = rs4.getInt("Id_parqueadero");
              
           }
       }catch (SQLException e) {
           JOptionPane.showMessageDialog(null, "Error al cargar el id del parqueadero. ");
           
       }
         return consultaIdParq;
    }
    
    //Metodo que consulta el Id del convenio teniendo en cuenta su nombre
    public int consultarIdConvenio(String variable){
        
        //Traemos el id del convenio 
        try {
           Connection cn4 = Conexion.conectar();
           PreparedStatement pst4;
           pst4 = cn4.prepareStatement(
                       "select Id_convenio from convenios where Nombre_convenio = '"+variable+"'");

           ResultSet rs4 = pst4.executeQuery();

           if (rs4.next()) {
                consultaIdConvenio = rs4.getInt("Id_convenio");
              
           }
       }catch (SQLException e) {
          JOptionPane.showMessageDialog(null,"Error al cargar el id del convenio. ");
           
       }
         return consultaIdConvenio;
    }

    //Metodo que consulta el Id de la tarifa teniendo en cuenta su nombre
    public int consultarIdTarifa(String variable){
        
        //Traemos el id de la tarifa 
        try {
           Connection cn4 = Conexion.conectar();
           PreparedStatement pst4;
           pst4 = cn4.prepareStatement(
                       "select Id_tarifa from tarifas where Nombre_tarifa = '"+variable+"'");

           ResultSet rs4 = pst4.executeQuery();

           if (rs4.next()) {
                consultaIdTarifa = rs4.getInt("Id_tarifa");
              
           }
       }catch (SQLException e) {
           JOptionPane.showMessageDialog(null,"Error al cargar el id de la tarifa. ");
           
       }
         return consultaIdTarifa;
    }
}




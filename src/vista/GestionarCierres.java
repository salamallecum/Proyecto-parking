package vista;

import clasesDeApoyo.Conexion;
import com.sun.glass.events.KeyEvent;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;


/**
 *
 * @author ALEJO
 */
public class GestionarCierres extends javax.swing.JFrame implements Runnable {
      
    public static DefaultTableModel modelo;
    int Fila;
    Thread hiloTablaCierres;
    public static int codigoCierre_update;
    boolean estadoFactura;
    public static boolean hayCierreAbierto = false;
    
    private final Logger log = Logger.getLogger(GestionarCierres.class);
    private URL url = GestionarCierres.class.getResource("Log4j.properties");
    
    /**
     * Creates new form nuevoUsuario
     */
    public GestionarCierres() {       
        initComponents();
        setSize(691, 525);
        setResizable(false);
        setTitle("Gestionar cierres");
        setLocationRelativeTo(null);
        
        //Avisamos que esta ventana se encuentra abierta para que no deje cerrar sesion al usuario
        MenuAdministrador.hayAlgunaVentanaAbiertaDelSistema = true;
        
        hiloTablaCierres = new Thread(this);
            hiloTablaCierres.start();
            
        //Agregamos la funcion de liquidar vehiculo al hacer click sobre el registro de la tabla
        table_listaCierres.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e){
            int fila_point = table_listaCierres.rowAtPoint(e.getPoint());
            int columna_point = 0;

            if(fila_point > -1){
                codigoCierre_update = (int) modelo.getValueAt(fila_point, columna_point);
                
                if(codigoCierre_update == 4444 || hayCierreAbierto==true){
                    JOptionPane.showMessageDialog(null,"No permitido.");
                    
                }
                else{
                    hayCierreAbierto = true;
                    InformacionCierre infoCie= new InformacionCierre();
                    infoCie.setVisible(true);
                }
            }
        }
    });
                    
    }
    
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("icons/tarif.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        txt_usuario = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_listaCierres = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        txt_codigoCierre = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(getIconImage());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Usuario:");

        txt_usuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_usuarioKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_usuarioKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_usuarioKeyTyped(evt);
            }
        });

        table_listaCierres.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "CÃ³digo", "Fecha ", "Usuario", "Producido ($)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table_listaCierres);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Codigo:");

        txt_codigoCierre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_codigoCierreKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_codigoCierreKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_codigoCierreKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_codigoCierre, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(29, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_codigoCierre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void txt_usuarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_usuarioKeyTyped
        //Cuenta la cantidad maxima de caracteres
        int numeroCaracteres = 10;
        if(txt_usuario.getText().length()== numeroCaracteres){
            evt.consume();
            JOptionPane.showMessageDialog(null,"Solo 10 caracteres");
            txt_usuario.setText("");
        } 
    }//GEN-LAST:event_txt_usuarioKeyTyped

    private void txt_codigoCierreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_codigoCierreKeyTyped
        //Cuenta la cantidad maxima de caracteres
        int numeroCaracteres = 10;
        if(txt_codigoCierre.getText().length()== numeroCaracteres){
            evt.consume();
            JOptionPane.showMessageDialog(null,"Solo 10 caracteres");
            txt_codigoCierre.setText("");
        } 
    }//GEN-LAST:event_txt_codigoCierreKeyTyped

    private void txt_codigoCierreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_codigoCierreKeyReleased
        String buscar = txt_codigoCierre.getText();
        busquedaCierrePorCodigo(buscar);
    }//GEN-LAST:event_txt_codigoCierreKeyReleased

    private void txt_usuarioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_usuarioKeyReleased
        String buscar = txt_usuario.getText();
        busquedaCierrePorUsuario(buscar);
    }//GEN-LAST:event_txt_usuarioKeyReleased

    private void txt_codigoCierreKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_codigoCierreKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ESCAPE){
            Limpiar();                       
        }
        
    }//GEN-LAST:event_txt_codigoCierreKeyPressed

    private void txt_usuarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_usuarioKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ESCAPE){
            Limpiar();                       
        }
    }//GEN-LAST:event_txt_usuarioKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionarCierres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionarCierres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionarCierres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionarCierres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    //Esto cambia la apariencia de la app para que se acomode al Siste Operativo
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    new GestionarCierres().setVisible(true);
                }catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    //Logger.getLogger(GestionarCierres.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    public static javax.swing.JTable table_listaCierres;
    private javax.swing.JTextField txt_codigoCierre;
    private javax.swing.JTextField txt_usuario;
    // End of variables declaration//GEN-END:variables

    public void busquedaCierrePorCodigo(String texto){
       
        try{
            String [] titulos = {"Codigo", "Fecha", "Usuario", "Producido ($)"};
            String filtro = ""+texto+"_%";
            String SQL = "select Codigo, Fecha_cierre,  Nombre_usuario, Producido from cierres where Codigo like "+'"'+filtro+'"';
            modelo = new DefaultTableModel(null, titulos);
            
            Connection cn6 = Conexion.conectar();
            PreparedStatement pst6 = cn6.prepareStatement(SQL);
            ResultSet rs6 = pst6.executeQuery(SQL);
            
            String[] fila = new String[4];
            
            while(rs6.next()){
                String codigo = Integer.toString(rs6.getInt("Codigo"));
                String valor_pagar = Integer.toString(rs6.getInt("Producido"));
                
                fila[0]= codigo;
                fila[1]=rs6.getString("Fecha_cierre");
                fila[2]=rs6.getString("Nombre_usuario");
                fila[3]= valor_pagar;
                modelo.addRow(fila);
            }
            table_listaCierres.setModel(modelo);
            rs6.close();
            cn6.close();
            
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Â¡Â¡ERROR de busqueda de cierre, contacte al administrador.");
        }
                  
    }   
    
    public void busquedaCierrePorUsuario(String texto){
        
        try{
            String [] titulos = {"Codigo", "Fecha", "Usuario", "Producido ($)"};
            String filtro = ""+texto+"_%";
            String SQL = "select Codigo, Fecha_cierre,  Nombre_usuario, Producido from cierres where Nombre_usuario like "+'"'+filtro+'"';
            modelo = new DefaultTableModel(null, titulos);
            
            Connection cn6 = Conexion.conectar();
            PreparedStatement pst6 = cn6.prepareStatement(SQL);
            ResultSet rs6 = pst6.executeQuery(SQL);
            
            String[] fila = new String[4];
            
            while(rs6.next()){
                String codigo = Integer.toString(rs6.getInt("Codigo"));
                String valor_pagar = Integer.toString(rs6.getInt("Producido"));
                
                fila[0]= codigo;
                fila[1]=rs6.getString("Fecha_cierre");
                fila[2]=rs6.getString("Nombre_usuario");
                fila[3]= valor_pagar;
                modelo.addRow(fila);
            }
            table_listaCierres.setModel(modelo);
            rs6.close();
            cn6.close();
            
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Â¡Â¡ERROR de busqueda de factura!!, contacte al administrador.");
        }
    }
    
    public void  busquedaFacturaPorFecha(String texto){
    
        try{
            String [] titulos = {"Codigo", "Fecha", "Usuario", "Valor ($)"};
            String SQL = "select Codigo, Fecha_factura,  Facturado_por, Valor_a_pagar from facturas where Fecha_factura = '"+texto+"'";
            modelo = new DefaultTableModel(null, titulos);
            
            Connection cn6 = Conexion.conectar();
            PreparedStatement pst6 = cn6.prepareStatement(SQL);
            ResultSet rs6 = pst6.executeQuery(SQL);
            
            String[] fila = new String[4];
            
            while(rs6.next()){
                
                String codigo = Integer.toString(rs6.getInt("Codigo"));
                String valor_pagar = Integer.toString(rs6.getInt("Valor_a_pagar"));

                fila[0]= codigo;
                fila[1]=rs6.getString("Fecha_factura");
                fila[2]=rs6.getString("Facturado_por");
                fila[3]= valor_pagar;
                modelo.addRow(fila);
                Limpiar();
            }
            if(!rs6.next()){
                JOptionPane.showMessageDialog(null, "No existe factura con la fecha especificada.");
                Limpiar();
                
            }
            table_listaCierres.setModel(modelo);
            rs6.close();
            cn6.close();
            
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Â¡Â¡ERROR de busqueda de factura!!, contacte al administrador.");
        }
    }
    
    //Metodo que limpia el formulario en caso de ingresar tablero principal
    public void Limpiar(){
        txt_codigoCierre.setText("");
        txt_usuario.setText("");
    }
      
     //Metodo que ejecuta el hilo que trae los datos de los cierres en tiempo real    
    @Override
    public void run() {
        Thread ct = Thread.currentThread();
            while(ct == hiloTablaCierres){
                
                //Cargamos los datos de la tabla
                try {
                    modelo = new DefaultTableModel();
                    table_listaCierres.setModel(modelo);

                    Connection cn = Conexion.conectar();
                    PreparedStatement pst = cn.prepareStatement(
                                "select Codigo, Fecha_cierre,  Nombre_usuario, Producido from cierres");

                    ResultSet rs = pst.executeQuery();

                    ResultSetMetaData rsmd = rs.getMetaData();
                    int cantidadColumnas = rsmd.getColumnCount();

                    modelo.addColumn("Codigo");
                    modelo.addColumn("Fecha");
                    modelo.addColumn("Usuario");
                    modelo.addColumn("Producido ($)");

                    int[] anchosTabla = {10,10,5,10};

                    for(int x=0; x < cantidadColumnas; x++){
                        table_listaCierres.getColumnModel().getColumn(x).setPreferredWidth(anchosTabla[x]);
                    }

                    while (rs.next()) {

                        Object[] filas = new Object[cantidadColumnas];

                        for (int i = 0; i < cantidadColumnas; i++) {

                                filas[i] = rs.getObject(i + 1); 
                        }
                        modelo.addRow(filas);
                    }
                    cn.close();                    
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(null, "Error al mostrar tabla de cierres, Â¡Contacte al administrador!");
                    }
                try{
                    Thread.sleep(60000);
                }catch(InterruptedException e){}
            }
    }  
}



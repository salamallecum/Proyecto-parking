package vista;

import clasesDeApoyo.generadorClavesYCodigos;
import modelo.Parqueadero;
import controlador.ConvenioControlador;
import controlador.FacturaControlador;
import controlador.ParqueaderoControlador;
import controlador.TarifaControlador;
import controlador.VehiculoControlador;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.URL;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.table.DefaultTableModel;
import modelo.Convenio;
import modelo.Factura;
import modelo.Tarifa;
import modelo.Vehiculo;
import org.apache.log4j.Logger;
import static vista.PanelVehiculos.modelo;



/**
 *
 * @author ALEJO
 */
public class PanelVehiculos extends javax.swing.JPanel implements Runnable{

    public static DefaultTableModel modelo;
    Parqueadero nomParqueadero;
    Convenio nomConvenio;
    Tarifa nomTarifa;
    int Fila;
    int FilaAnterior;
    public static String vehiculo_update;
    public static boolean hayVehiculoEnEdicion = false;
    //public static boolean vehiculoEnParqueadero = false;
    String user = "";
    
    VehiculoControlador vehicontrolador;
    Vehiculo nuevoVehiculo = new Vehiculo(0, "", "", "", 0, 0, 0);
    
    ParqueaderoControlador parqControla;
    TarifaControlador tarifaControla;
    ConvenioControlador convenioControla;
    FacturaControlador facturaControla;
    
    Factura nuevaFactura = new Factura(0, "", "", "", "", "", 0, "", "", "", 0, 0, "", 0, "", "", "", "", "");
    
    boolean elvehiculoTieneFacturaPrimerIngresoPrevRegistrada = true;
    
    //Declaramos los objetos  y se los aprovisionamos a su combobox
    Parqueadero parq = new Parqueadero();
    Convenio conv = new Convenio();
    Tarifa tarif = new Tarifa();
    
    //Variables boton editar
    String parqueaderoActual;
    String convenioActual;
    String tarifaActual;
    String placadelVehiculoAEditar;
    int idParqueaderoActual;
    int idConvenioActual;
    int idTarifaActual;
    Parqueadero parqueaderoEditar;
    Convenio convenioEditar;
    Tarifa tarifaEditar;
    
    Thread hilo1 = new Thread(this);
    Thread hilo2 = new Thread(this);
    Thread hilo3 = new Thread(this);
    
    private final Logger log = Logger.getLogger(PanelVehiculos.class);
    private URL url = PanelVehiculos.class.getResource("Log4j.properties");
    
    JScrollBar pane = new JScrollBar();
 
    /**
     * Creates new form PanelVehiculos
     */
    public PanelVehiculos() {
        initComponents();    
        user = Login.usuario;
        
        vehicontrolador = new VehiculoControlador();
        parqControla = new ParqueaderoControlador();
        convenioControla = new ConvenioControlador();
        tarifaControla = new TarifaControlador();
        facturaControla = new FacturaControlador();
        
        hilo1.start();
        
        hilo2.start();
        
        hilo3.start();
                   
        vehicontrolador.cargarTablaDeVehiculosPorDefault();
        
        //Agregamos la funcion de editar vehiculo al hacer click sobre el registro de la tabla
        Table_listaVehiculos.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e){
            int fila_point =  Table_listaVehiculos.rowAtPoint(e.getPoint());
            int columna_point = 0;

            if(fila_point > -1){
                vehiculo_update = (String) modelo.getValueAt(fila_point, columna_point);              
            }
        }
    });
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_estadoParqueadero = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table_listaVehiculos = new javax.swing.JTable();
        btn_generarPDF = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_placa = new javax.swing.JTextField();
        txt_propietario = new javax.swing.JTextField();
        cmb_clase = new javax.swing.JComboBox<>();
        cmb_parqueaderos = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        cmb_convenios = new javax.swing.JComboBox<>();
        btn_ingresar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btn_eliminar = new javax.swing.JButton();
        cmb_tarifa = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txt_busquedapropietario = new javax.swing.JTextField();
        txt_busquedaPlaca = new javax.swing.JTextField();
        btn_editar = new javax.swing.JButton();
        check_estaVehiculoEnParqueadero = new javax.swing.JCheckBox();

        btn_estadoParqueadero.setText("Estado de Parqueadero");
        btn_estadoParqueadero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_estadoParqueaderoActionPerformed(evt);
            }
        });

        Table_listaVehiculos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Placa", "Propietario", "Clase", "N° Parq", "Convenio", "Tarifa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table_listaVehiculos.setEditingColumn(0);
        Table_listaVehiculos.setEditingRow(0);
        Table_listaVehiculos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table_listaVehiculosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table_listaVehiculos);

        btn_generarPDF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/generarPDF.png"))); // NOI18N
        btn_generarPDF.setText("Generar Informe PDF");
        btn_generarPDF.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_generarPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_generarPDFActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Placa:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Propietario:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Clase:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("N° de Parqueadero:");

        txt_placa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_placaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_placaFocusLost(evt);
            }
        });
        txt_placa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_placaActionPerformed(evt);
            }
        });
        txt_placa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_placaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_placaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_placaKeyTyped(evt);
            }
        });

        txt_propietario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_propietarioFocusGained(evt);
            }
        });
        txt_propietario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_propietarioKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_propietarioKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_propietarioKeyTyped(evt);
            }
        });

        cmb_clase.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "AUTOMOVIL", "MOTO" }));
        cmb_clase.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_claseItemStateChanged(evt);
            }
        });
        cmb_clase.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmb_claseFocusGained(evt);
            }
        });

        cmb_parqueaderos.setAutoscrolls(true);
        cmb_parqueaderos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmb_parqueaderosFocusGained(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Convenio:");

        cmb_convenios.setAutoscrolls(true);
        cmb_convenios.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_conveniosItemStateChanged(evt);
            }
        });
        cmb_convenios.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmb_conveniosFocusGained(evt);
            }
        });

        btn_ingresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Save_icon-icons.com_73702.png"))); // NOI18N
        btn_ingresar.setText("Ingresar");
        btn_ingresar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_ingresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ingresarActionPerformed(evt);
            }
        });

        btn_eliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/ic_delete_128_28267.png"))); // NOI18N
        btn_eliminar.setText("Eliminar");
        btn_eliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_eliminar.setEnabled(false);
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });

        cmb_tarifa.setAutoscrolls(true);
        cmb_tarifa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_tarifaItemStateChanged(evt);
            }
        });
        cmb_tarifa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmb_tarifaFocusGained(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Tarifa:");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Buscar por"));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Placa:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Propietario:");

        txt_busquedapropietario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_busquedapropietarioKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_busquedapropietarioKeyTyped(evt);
            }
        });

        txt_busquedaPlaca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_busquedaPlacaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_busquedaPlacaKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_busquedaPlaca, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_busquedapropietario, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel7)
                    .addComponent(txt_busquedaPlaca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel8))
                    .addComponent(txt_busquedapropietario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btn_editar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-validated_40458.png"))); // NOI18N
        btn_editar.setText("Editar");
        btn_editar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_editar.setEnabled(false);
        btn_editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editarActionPerformed(evt);
            }
        });

        check_estaVehiculoEnParqueadero.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        check_estaVehiculoEnParqueadero.setText("Está en parqueadero");
        check_estaVehiculoEnParqueadero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_estaVehiculoEnParqueaderoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmb_clase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_propietario, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_placa, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmb_parqueaderos, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(cmb_convenios, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_ingresar)
                    .addComponent(btn_eliminar)
                    .addComponent(btn_editar))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_generarPDF)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(59, 59, 59)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(131, 131, 131)
                            .addComponent(jLabel6)
                            .addGap(18, 18, 18)
                            .addComponent(cmb_tarifa, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(37, 37, 37)
                            .addComponent(check_estaVehiculoEnParqueadero))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(52, 52, 52)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 973, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel1)
                            .addComponent(txt_placa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel2))
                            .addComponent(txt_propietario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel3)
                            .addComponent(cmb_clase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel4)
                            .addComponent(cmb_parqueaderos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmb_convenios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btn_ingresar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_editar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmb_tarifa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(check_estaVehiculoEnParqueadero))
                .addGap(21, 21, 21)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_generarPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_estadoParqueaderoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_estadoParqueaderoActionPerformed
       
    }//GEN-LAST:event_btn_estadoParqueaderoActionPerformed

    //Metodo que genera el reporte pdf de los vehiculos
    private void btn_generarPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_generarPDFActionPerformed
        vehicontrolador.generarReportePDFdeVehiculosRegistrados();
        btn_generarPDF.setEnabled(false);
    }//GEN-LAST:event_btn_generarPDFActionPerformed

    
    private void txt_placaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_placaKeyTyped
        
        //Cuenta la cantidad maxima de caracteres
        int numeroCaracteres = 5;
        if(txt_placa.getText().length()> numeroCaracteres){
            evt.consume();
            JOptionPane.showMessageDialog(null,"Solo 6 caracteres");
        }
        
        //Forza a escribir en mayuscula
        char c=evt.getKeyChar();
        if(Character.isLowerCase(c)){
            evt.setKeyChar(Character.toUpperCase(c));
            
        }
    }//GEN-LAST:event_txt_placaKeyTyped

    private void txt_propietarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_propietarioKeyTyped
        
        //Cuenta la cantidad maxima de caracteres
        int numeroCaracteres = 29;
        if(txt_propietario.getText().length()> numeroCaracteres){
            evt.consume();
            JOptionPane.showMessageDialog(null,"Solo 30 caracteres");
        }

        //Forza a escribir en mayuscula
        char c=evt.getKeyChar();
        if(Character.isLowerCase(c)){
            evt.setKeyChar(Character.toUpperCase(c));
            
        }
    }//GEN-LAST:event_txt_propietarioKeyTyped

    //Metodo del boton ingresar
    private void btn_ingresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ingresarActionPerformed
        
        int clase_cmb, parqueadero_cmb, validacion = 0;
        String placa, dueño, clase_string = "";
        Parqueadero parqSeleccionado = new Parqueadero();
                        
        placa = txt_placa.getText().trim();
        dueño = txt_propietario.getText().trim();
        clase_cmb = cmb_clase.getSelectedIndex();
        parqueadero_cmb = cmb_parqueaderos.getSelectedIndex();
        
        Convenio convSeleccionado = new Convenio();
        Tarifa tarifSeleccionada = new Tarifa();     
        
        convSeleccionado = (Convenio)cmb_convenios.getSelectedItem();
        tarifSeleccionada = (Tarifa)cmb_tarifa.getSelectedItem();
        
        boolean vehiculoEnParqueadero = check_estaVehiculoEnParqueadero.isSelected();
        String vehiculoEstaEnParqueo = "";
        
        //Capturamos el objeto parqueadero para validar le verdadero id en base de datos
        parqSeleccionado = (Parqueadero)cmb_parqueaderos.getSelectedItem();
                       
        int minimoCaracteres = 6;
        
        if(placa.equals("")){
            txt_placa.setBackground(Color.red);
            validacion++;
        }
        if(dueño.equals("")){
            txt_propietario.setBackground(Color.red);
            validacion++;
        }
        
        if(clase_cmb == 0){
            clase_string = "Seleccione";
            cmb_clase.setBackground(Color.red);
            validacion++;
        }        
        else if(clase_cmb == 1){
            clase_string = "AUTOMOVIL";
        }else if(clase_cmb == 2){
            clase_string = "MOTO";
        }
        
        if(parqueadero_cmb==0){
            cmb_parqueaderos.setBackground(Color.red);
            validacion++;
        }
                      
        if(txt_placa.getText().length() < minimoCaracteres){
            txt_placa.setBackground(Color.red);
            JOptionPane.showMessageDialog(null,"Placa no válida.");
            txt_placa.setText("");
            validacion++;
        }
        
        if(hayVehiculoEnEdicion == true){
            JOptionPane.showMessageDialog(null, "No Permitido, cierre la ventana de edición de vehiculos para continuar.");
            txt_placa.requestFocus();
            validacion++;
        }
        
        if(vehiculoEnParqueadero){
            vehiculoEstaEnParqueo = "Si";
        }else{
            vehiculoEstaEnParqueo = "No";
        }
                
        boolean vehiculoYaPreviamenteRegistrado = vehicontrolador.evaluarExistenciaDelVehiculo(placa);
        
        if(vehiculoYaPreviamenteRegistrado == true){
            JOptionPane.showMessageDialog(null, "El vehiculo ya se encuentra registrado.");
            txt_placa.setText("");
            validacion++;
        }      
        
        //Validamos el verdadero id del parqueadero en bd
        int idRealDelParqueaderoSeleccionado = parqControla.consultarIdParqueadero(parqSeleccionado.getNombre());
                
        boolean parqueaderoEstaOcupado = parqControla.consultarDisponibilidadDeParqueaderoMedianteID(idRealDelParqueaderoSeleccionado);
        
        if(parqueaderoEstaOcupado == true){
            JOptionPane.showMessageDialog(null, "El parqueadero indicado ya se encuentra ocupado.");
            cmb_parqueaderos.setSelectedIndex(0);
            validacion++;
        } 
        
         //Validamos el verdadero id del convenio y de la tarifa en bd
        int idRealDelConvenioSeleccionado = convenioControla.consultarIdDeunConvenio(convSeleccionado.getNombre());
        int idRealDeTarifaSeleccionada = tarifaControla.consultarIdDeunaTarifa(tarifSeleccionada.getNombreTarifa());
             
        if(validacion == 0 ){
                     
            //Encapsulamos el objeto vehiculo 
            nuevoVehiculo.setId(0);
            nuevoVehiculo.setPlaca(placa);
            nuevoVehiculo.setPropietario(dueño);
            nuevoVehiculo.setClase(clase_string);
            nuevoVehiculo.setId_parqueadero(idRealDelParqueaderoSeleccionado);
            nuevoVehiculo.setId_convenio(idRealDelConvenioSeleccionado);
            nuevoVehiculo.setId_tarifa(idRealDeTarifaSeleccionada); 
            nuevoVehiculo.setEstaEnParqueadero(vehiculoEstaEnParqueo);
            
            //Evaluamos si el vehiculo tiene factura abierta
            boolean vehiculoConFctraAbierta = vehicontrolador.consultarSiVehiculoTieneFacturasAbiertas(placa);
            
            //Generamos el ingreso del vehiculo en caja dependiendo de si esta o no en parqueadero
            if(vehiculoEstaEnParqueo.equals("Si")){
                
                if(vehiculoConFctraAbierta == true){
                    int idFctra = facturaControla.consultarIdDeUnaFacturaAbierta(placa);                    
                    facturaControla.actualizarFacturaAbierta(idFctra, placa, dueño, clase_string, idRealDelParqueaderoSeleccionado, idRealDelConvenioSeleccionado, idRealDeTarifaSeleccionada);
                    
                    //Validamos si el parqueadero utilizado por el vehiculo antes de registrarse en el sistema es igual al ingresado por caja
                    int idDelParqDelVehiculoAntesDeSerRegistrado = vehicontrolador.consultarIdParqQueOcupaUnVehiculo(placa);
                    
                    if(idDelParqDelVehiculoAntesDeSerRegistrado != idRealDelParqueaderoSeleccionado){
                       parqControla.liberarParqueadero(placa);
                       parqControla.actualizarEstadoDeParqueadero(placa, dueño, idRealDelParqueaderoSeleccionado, vehiculoEstaEnParqueo);
                    }
                                        
                }else{
                    //Modelamos la factura de primer ingreso 
                    nuevaFactura.setId(0);
                    nuevaFactura.setCodigo(generadorClavesYCodigos.generarRandomString(10));
                    nuevaFactura.setFechaDeFactura(facturaControla.fecha_de_factura());
                    nuevaFactura.setPlaca(placa);
                    nuevaFactura.setPropietario(dueño);
                    nuevaFactura.setClaseDeVehiculo(clase_string);
                    nuevaFactura.setId_parqueadero(idRealDelParqueaderoSeleccionado);
                    nuevaFactura.setFacturadoPor(user);
                    nuevaFactura.setEstadoDeFactura("Abierta");
                    nuevaFactura.setEstaContabilizada("No");
                    nuevaFactura.setId_convenio(idRealDelConvenioSeleccionado);
                    nuevaFactura.setId_tarifa(idRealDeTarifaSeleccionada);
                    nuevaFactura.setFechaDeIngresoVehiculo("1990-01-01 23:59:00"); //No generará cobro pues no estamos teniendo en cuenta la hora en que fue ingresado
                    nuevaFactura.setId_cierre(1);

                    //Creamos el objeto Factura de primer ingreso
                    facturaControla.crearFactura(nuevaFactura);
                    
                    //Actualizamos el estado del parqueadero
                    parqControla.actualizarEstadoDeParqueadero(placa, dueño, idRealDelParqueaderoSeleccionado, vehiculoEstaEnParqueo);
                }
                                
            }else{
                if(vehiculoConFctraAbierta == true){
                    int idFctra = facturaControla.consultarIdDeUnaFacturaAbierta(placa);
                    facturaControla.actualizarFacturaAbierta(idFctra, placa, dueño, clase_string, idRealDelParqueaderoSeleccionado, idRealDelConvenioSeleccionado, idRealDeTarifaSeleccionada);
                    
                    //Validamos si el parqueadero utilizado por el vehiculo antes de registrarse en el sistema es igual al ingresado por caja
                    int idDelParqDelVehiculoAntesDeSerRegistrado = vehicontrolador.consultarIdParqQueOcupaUnVehiculo(placa);
                    
                    if(idDelParqDelVehiculoAntesDeSerRegistrado != idRealDelParqueaderoSeleccionado){
                       parqControla.liberarParqueadero(placa);
                       vehiculoEstaEnParqueo = "Si";
                       parqControla.actualizarEstadoDeParqueadero(placa, dueño, idRealDelParqueaderoSeleccionado, vehiculoEstaEnParqueo);
                    }
                }else{
                    parqControla.actualizarEstadoDeParqueadero(placa, dueño, idRealDelParqueaderoSeleccionado, vehiculoEstaEnParqueo);
                }    
            }    
            
            //Crael objeto vehiculo en el sistema
            vehicontrolador.crearVehiculo(nuevoVehiculo);
            
            //Agregamos el objeto vehiculo a la tabla de vehiculos
            Object[] fila = new Object[6];
            fila[0] = placa;
            fila[1] = dueño;
            fila[2] = clase_string;
            fila[3] = parqSeleccionado.getNombre();
            fila[4] = convSeleccionado.getNombre();
            fila[5] = tarifSeleccionada.getNombreTarifa();
            modelo.addRow(fila);
                        
            JOptionPane.showMessageDialog(null, "Vehiculo registrado satisfactoriamente.");
            Limpiar();
            Normalizar();
            
            log.info("INFO - Se ha registrado un nuevo vehiculo en el sistema.");
            
        }else{
            JOptionPane.showMessageDialog(null, "Debes de llenar todos los campos.");
            Normalizar();
        } 
    }//GEN-LAST:event_btn_ingresarActionPerformed

    //Metodo del boton Eliminar
    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed
          
        Fila = Table_listaVehiculos.getSelectedRow();
        int cantidadFilas = Table_listaVehiculos.getSelectedRowCount();
         
        if(cantidadFilas == 0){
            JOptionPane.showMessageDialog(null, "Seleccione el vehiculo que desea eliminar.");
        }else{    
            String placa = Table_listaVehiculos.getValueAt(Fila, 0).toString();
            int decision = JOptionPane.showConfirmDialog(this, "¿Está seguro que desea eliminar?", "Eliminar vehiculo", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(decision == JOptionPane.YES_OPTION){               
                
                vehicontrolador.eliminarVehiculo(placa);

                boolean elvehiculoTieneFacturaAbierta = vehicontrolador.consultarSiVehiculoTieneFacturasAbiertas(placa);

                if(elvehiculoTieneFacturaAbierta == true){
                    facturaControla.eliminarFacturaAbierta(placa);
                } 

                JOptionPane.showMessageDialog(null, "El vehiculo de placa: " + placa + " ha sido eliminado"); 
                modelo.removeRow(Fila);
                parqControla.liberarParqueadero(placa);
                Limpiar();                              
                
            }else if(decision == JOptionPane.NO_OPTION){
                btn_ingresar.setEnabled(true);
            }
        }
    }//GEN-LAST:event_btn_eliminarActionPerformed

    
    private void Table_listaVehiculosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table_listaVehiculosMouseClicked
        btn_eliminar.setEnabled(true);
        btn_editar.setEnabled(true);
    }//GEN-LAST:event_Table_listaVehiculosMouseClicked

    
    private void txt_placaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_placaKeyReleased
        
    }//GEN-LAST:event_txt_placaKeyReleased
    
    private void txt_propietarioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_propietarioKeyReleased
        
    }//GEN-LAST:event_txt_propietarioKeyReleased

    
    private void cmb_conveniosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_conveniosItemStateChanged
        int conv_string = cmb_convenios.getSelectedIndex();
        String tipVehi_string = (String)cmb_clase.getSelectedItem();
        
        if(conv_string == 1){
            if(tipVehi_string.equals("AUTOMOVIL")){
            cmb_tarifa.setSelectedIndex(2);

            } else if(tipVehi_string.equals("MOTO")){
                cmb_tarifa.setSelectedIndex(3);
            }
        }
        
        if(conv_string > 1){
            cmb_tarifa.setSelectedIndex(1);
        } 
       
    }//GEN-LAST:event_cmb_conveniosItemStateChanged

    private void txt_busquedaPlacaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_busquedaPlacaKeyReleased
        String buscar = txt_busquedaPlaca.getText();
        vehicontrolador.busquedaDeVehiculoPorPlaca(buscar);
        Table_listaVehiculos.setModel(modelo);
    }//GEN-LAST:event_txt_busquedaPlacaKeyReleased

    private void txt_busquedaPlacaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_busquedaPlacaKeyTyped
        //Cuenta la cantidad maxima de caracteres
        int numeroCaracteres = 5;
        if(txt_placa.getText().length()> numeroCaracteres){
            evt.consume();
            JOptionPane.showMessageDialog(null,"Solo 6 caracteres");
        }
        
        //Forza a escribir en mayuscula
        char c=evt.getKeyChar();
        if(Character.isLowerCase(c)){
            evt.setKeyChar(Character.toUpperCase(c));
            
        }
    }//GEN-LAST:event_txt_busquedaPlacaKeyTyped

    private void txt_busquedapropietarioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_busquedapropietarioKeyReleased
        String buscar = txt_busquedapropietario.getText();
        vehicontrolador.busquedaDeVehiculoPorPropietario(buscar);
        Table_listaVehiculos.setModel(modelo);
    }//GEN-LAST:event_txt_busquedapropietarioKeyReleased

    private void txt_busquedapropietarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_busquedapropietarioKeyTyped
        //Forza a escribir en mayuscula
        char c=evt.getKeyChar();
        if(Character.isLowerCase(c)){
            evt.setKeyChar(Character.toUpperCase(c));
        }
        
        //Cuenta la cantidad maxima de caracteres
        int numeroCaracteres = 30;
        if(txt_placa.getText().length()> numeroCaracteres){
            evt.consume();
            JOptionPane.showMessageDialog(null,"Solo 30 caracteres");
        }
    }//GEN-LAST:event_txt_busquedapropietarioKeyTyped

    private void txt_placaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_placaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_placaActionPerformed

    private void txt_placaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_placaKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ESCAPE){
            Limpiar();  
            btn_eliminar.setEnabled(false);
            btn_ingresar.setEnabled(true);
            btn_editar.setEnabled(false);
        }
    }//GEN-LAST:event_txt_placaKeyPressed

    private void txt_propietarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_propietarioKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ESCAPE){
            Limpiar(); 
            btn_eliminar.setEnabled(false);
            btn_ingresar.setEnabled(true);
            btn_editar.setEnabled(false);
        }
    }//GEN-LAST:event_txt_propietarioKeyPressed

    private void cmb_tarifaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_tarifaItemStateChanged

    }//GEN-LAST:event_cmb_tarifaItemStateChanged

    private void btn_editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editarActionPerformed
        
        Fila = Table_listaVehiculos.getSelectedRow();
        int cantidadFilas = Table_listaVehiculos.getSelectedRowCount();
         
        if(cantidadFilas == 0){
            JOptionPane.showMessageDialog(null, "Seleccione el vehiculo que desea editar.");
        }else{    
            
            if(hayVehiculoEnEdicion == true){
                JOptionPane.showMessageDialog(null, "No Permitido");
            }else{
                hayVehiculoEnEdicion = true;
                vehiculo_update = Table_listaVehiculos.getValueAt(Fila, 0).toString();
                new EditarVehiculo().setVisible(true);
            }
        }
    }//GEN-LAST:event_btn_editarActionPerformed

    private void txt_placaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_placaFocusGained
        btn_eliminar.setEnabled(false);
        btn_ingresar.setEnabled(true);
        btn_editar.setEnabled(false);             
    }//GEN-LAST:event_txt_placaFocusGained

    private void txt_propietarioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_propietarioFocusGained
        btn_eliminar.setEnabled(false);
        btn_ingresar.setEnabled(true);
        btn_editar.setEnabled(false);
    }//GEN-LAST:event_txt_propietarioFocusGained

    private void cmb_claseFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmb_claseFocusGained
        btn_eliminar.setEnabled(false);
        btn_ingresar.setEnabled(true);
        btn_editar.setEnabled(false);
    }//GEN-LAST:event_cmb_claseFocusGained

    private void cmb_parqueaderosFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmb_parqueaderosFocusGained
        btn_eliminar.setEnabled(false);
        btn_ingresar.setEnabled(true);
        btn_editar.setEnabled(false);
    }//GEN-LAST:event_cmb_parqueaderosFocusGained

    private void cmb_conveniosFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmb_conveniosFocusGained
        btn_eliminar.setEnabled(false);
        btn_ingresar.setEnabled(true);
        btn_editar.setEnabled(false);
    }//GEN-LAST:event_cmb_conveniosFocusGained

    private void cmb_tarifaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmb_tarifaFocusGained
        btn_eliminar.setEnabled(false);
        btn_ingresar.setEnabled(true);
        btn_editar.setEnabled(false);
    }//GEN-LAST:event_cmb_tarifaFocusGained

    private void cmb_claseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_claseItemStateChanged
        
    }//GEN-LAST:event_cmb_claseItemStateChanged

    private void check_estaVehiculoEnParqueaderoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_estaVehiculoEnParqueaderoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_check_estaVehiculoEnParqueaderoActionPerformed

    private void txt_placaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_placaFocusLost
      
    }//GEN-LAST:event_txt_placaFocusLost

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTable Table_listaVehiculos;
    private javax.swing.JButton btn_editar;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JButton btn_estadoParqueadero;
    public static javax.swing.JButton btn_generarPDF;
    private javax.swing.JButton btn_ingresar;
    private javax.swing.JCheckBox check_estaVehiculoEnParqueadero;
    private javax.swing.JComboBox<String> cmb_clase;
    private javax.swing.JComboBox<String> cmb_convenios;
    private javax.swing.JComboBox<String> cmb_parqueaderos;
    private javax.swing.JComboBox<String> cmb_tarifa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField txt_busquedaPlaca;
    private javax.swing.JTextField txt_busquedapropietario;
    private javax.swing.JTextField txt_placa;
    private javax.swing.JTextField txt_propietario;
    // End of variables declaration//GEN-END:variables
    
    public void Limpiar(){
        txt_placa.setText("");
        txt_propietario.setText("");
        cmb_clase.setSelectedIndex(0);
        cmb_parqueaderos.setSelectedIndex(0);
        cmb_convenios.setSelectedIndex(0);
        cmb_tarifa.setSelectedIndex(0);
        check_estaVehiculoEnParqueadero.setSelected(false);
    } 
        
    public void Normalizar(){
        txt_placa.setBackground(Color.WHITE);
        txt_propietario.setBackground(Color.WHITE);
        cmb_clase.setBackground(Color.WHITE);
        cmb_parqueaderos.setBackground(Color.WHITE);
        cmb_convenios.setBackground(Color.WHITE);
        cmb_tarifa.setBackground(Color.WHITE);
        check_estaVehiculoEnParqueadero.setBackground(Color.WHITE);
    }
    
    //Metodo que ejecuta el hilo que trae los datos del estado de cupo de parqueadero, Convenios y tarifas en tiempo real    
    @Override
    public void run() {
        Thread ct = Thread.currentThread();
        Thread ct1 = Thread.currentThread();
        Thread ct2 = Thread.currentThread();
        
        while(ct == hilo1){

            DefaultComboBoxModel modeloParq = new DefaultComboBoxModel(parq.mostrarParqueaderosTipoResidente());
            cmb_parqueaderos.setModel(modeloParq);

            try{
                ct.sleep(60000);
            }catch(InterruptedException e){}
        }

        while(ct1 == hilo2){

            DefaultComboBoxModel modeloConv = new DefaultComboBoxModel(conv.mostrarConveniosDisponibles());
            cmb_convenios.setModel(modeloConv);
            conv.almacenarNombresConvenio();

            try{
                ct1.sleep(60000);
            }catch(InterruptedException e){}
        }

        while(ct2 == hilo3){

            DefaultComboBoxModel modeloTarif = new DefaultComboBoxModel(tarif.mostrarTarifasDisponibles());
            cmb_tarifa.setModel(modeloTarif);
            tarif.almacenarNombresTarifa();

            try{
                ct2.sleep(60000);
            }catch(InterruptedException e){}
        }
    }       
}








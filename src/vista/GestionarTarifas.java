package vista;

import com.sun.glass.events.KeyEvent;
import controlador.TarifaControlador;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import modelo.Tarifa;
import org.apache.log4j.Logger;


/**
 *
 * @author ALEJO
 */
public class GestionarTarifas extends javax.swing.JFrame {
      
    public static DefaultTableModel modeloTablaTarifas;
    int Fila;
    int FilaAnterior;
    
    public static boolean tarifaAnulada = false;
    public static boolean cobroMinutos = false;
    public static boolean cobroHoras = false;
    public static boolean tieneDescuento = false;
    
    Tarifa nuevaTarifa = new Tarifa();
    Tarifa tarifaRescatada = new Tarifa();
    Tarifa editTarifa = new Tarifa();
    TarifaControlador tarifaControla = new TarifaControlador();
       
    private final Logger log = Logger.getLogger(GestionarTarifas.class);
    private URL url = GestionarTarifas.class.getResource("Log4j.properties");
    
    /**
     * Creates new form nuevoUsuario
     */
    public GestionarTarifas() {       
        initComponents();
        setSize(737, 570);
        setResizable(false);
        setTitle("Gestionar tarifas");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        
        tarifaControla.cargarTarifas();
    }
    
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("icons/tarif.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        txt_nombreTarifa = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_listaTarifas = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txt_subtarifaParaAplicar = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cmb_frecuencia = new javax.swing.JComboBox<>();
        txt_monto = new javax.swing.JTextField();
        check_aplicarDescuento = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        txt_menosMinutos = new javax.swing.JTextField();
        txt_menosHoras = new javax.swing.JTextField();
        txt_menosDias = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        check_anularTarif = new javax.swing.JCheckBox();
        check_activarMinutosAdicionales = new javax.swing.JCheckBox();
        check_activarHorasAdicionales = new javax.swing.JCheckBox();
        btn_ingresar = new javax.swing.JButton();
        btn_editar = new javax.swing.JButton();
        btn_eliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(getIconImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Nombre de tarifa:");

        txt_nombreTarifa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_nombreTarifaFocusGained(evt);
            }
        });
        txt_nombreTarifa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_nombreTarifaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_nombreTarifaKeyTyped(evt);
            }
        });

        table_listaTarifas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Monto ($)", "Frecuencia", "Anulada?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_listaTarifas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_listaTarifasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_listaTarifas);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Monto ($):");

        txt_subtarifaParaAplicar.setEditable(false);
        txt_subtarifaParaAplicar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_subtarifaParaAplicarKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Frecuencia:");

        cmb_frecuencia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "MINUTO", "HORA", "DIA" }));
        cmb_frecuencia.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_frecuenciaItemStateChanged(evt);
            }
        });

        txt_monto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_montoKeyTyped(evt);
            }
        });

        check_aplicarDescuento.setText("Aplicar descuento");
        check_aplicarDescuento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                check_aplicarDescuentoItemStateChanged(evt);
            }
        });
        check_aplicarDescuento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                check_aplicarDescuentoMouseClicked(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Descontar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        txt_menosMinutos.setEditable(false);

        txt_menosHoras.setEditable(false);

        txt_menosDias.setEditable(false);
        txt_menosDias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_menosDiasActionPerformed(evt);
            }
        });

        jLabel12.setText("minutos");

        jLabel13.setText("horas");

        jLabel14.setText("dias");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_menosMinutos, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(txt_menosHoras, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addComponent(txt_menosDias, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(txt_menosMinutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel12)
                .addComponent(txt_menosHoras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel13)
                .addComponent(txt_menosDias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel14))
        );

        check_anularTarif.setText("Anular tarifa");

        check_activarMinutosAdicionales.setText("Cobrar minutos ($)");
        check_activarMinutosAdicionales.setEnabled(false);
        check_activarMinutosAdicionales.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                check_activarMinutosAdicionalesItemStateChanged(evt);
            }
        });

        check_activarHorasAdicionales.setText("Cobrar horas ($)");
        check_activarHorasAdicionales.setEnabled(false);
        check_activarHorasAdicionales.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                check_activarHorasAdicionalesItemStateChanged(evt);
            }
        });

        btn_ingresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Save_icon-icons.com_73702.png"))); // NOI18N
        btn_ingresar.setText("Ingresar");
        btn_ingresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ingresarActionPerformed(evt);
            }
        });

        btn_editar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-validated_40458.png"))); // NOI18N
        btn_editar.setText("Editar");
        btn_editar.setEnabled(false);
        btn_editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editarActionPerformed(evt);
            }
        });

        btn_eliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/ic_delete_128_28267.png"))); // NOI18N
        btn_eliminar.setText("Eliminar");
        btn_eliminar.setEnabled(false);
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 699, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(check_aplicarDescuento)
                                        .addGap(18, 18, 18)
                                        .addComponent(check_activarMinutosAdicionales)
                                        .addGap(18, 18, 18)
                                        .addComponent(check_activarHorasAdicionales)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_subtarifaParaAplicar, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txt_monto, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cmb_frecuencia, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txt_nombreTarifa, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(check_anularTarif)))))
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_ingresar, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_editar)
                            .addComponent(btn_eliminar))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_ingresar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_editar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(check_anularTarif)
                            .addComponent(txt_nombreTarifa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(cmb_frecuencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_monto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(check_activarMinutosAdicionales)
                            .addComponent(check_activarHorasAdicionales)
                            .addComponent(check_aplicarDescuento)
                            .addComponent(txt_subtarifaParaAplicar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void txt_nombreTarifaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nombreTarifaKeyTyped
        //Forza aescribir en mayuscula
        char c=evt.getKeyChar();
        if(Character.isLowerCase(c)){
            evt.setKeyChar(Character.toUpperCase(c));
        }
        
        //Cuenta la cantidad maxima de caracteres
        int numeroCaracteres = 30;
        if(txt_nombreTarifa.getText().length()== numeroCaracteres){
            evt.consume();
            JOptionPane.showMessageDialog(null,"Solo 30 caracteres");
            txt_nombreTarifa.setText("");
        } 
    }//GEN-LAST:event_txt_nombreTarifaKeyTyped

    private void txt_nombreTarifaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nombreTarifaKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ESCAPE){
            Limpiar();
            btn_eliminar.setEnabled(false);
            btn_editar.setEnabled(false);
            btn_ingresar.setEnabled(true);
        }
    }//GEN-LAST:event_txt_nombreTarifaKeyPressed

    private void table_listaTarifasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_listaTarifasMouseClicked
        
        Fila = table_listaTarifas.getSelectedRow();
        int cantidadFilas = table_listaTarifas.getSelectedRowCount();
                             
        String nombreTarifa = table_listaTarifas.getValueAt(Fila, 0).toString();
            
        //No deja editar el convenio ninguno
        if(nombreTarifa.equals("NINGUNA")){
            JOptionPane.showMessageDialog(null, "No Permitido");
            txt_nombreTarifa.setEditable(true);
            btn_editar.setEnabled(false);
            btn_eliminar.setEnabled(false);
            btn_ingresar.setEnabled(true);
            Limpiar();
        }else{
            btn_editar.setEnabled(true);
            btn_eliminar.setEnabled(true);
            btn_ingresar.setEnabled(false);
            
            tarifaRescatada = tarifaControla.traerUnaTarifaAlFormulario(nombreTarifa);
            
            txt_nombreTarifa.setText(tarifaRescatada.getNombreTarifa());
            txt_monto.setText(tarifaRescatada.getMontoTarifa());
            txt_subtarifaParaAplicar.setText(tarifaRescatada.getMontoTiempoAdicional());
            
            cmb_frecuencia.setSelectedItem(tarifaRescatada.getFrecuenciaTarifa()); 
            
            if(tarifaRescatada.getTarifaAnulada().equals("Si")){
                check_anularTarif.setSelected(true);
            }else{
                check_anularTarif.setSelected(false);
            }
            
            if(tarifaRescatada.getTarifaTieneDescuento().equals("Si")){
                check_aplicarDescuento.setSelected(true);  
                
                if(tarifaRescatada.getUnidadDelDescuento().equals("minutos")){
                    txt_menosMinutos.setText(tarifaRescatada.getTiempoDelDescuento());
                    txt_menosHoras.setText("");
                    txt_menosDias.setText("");
                    
                }else if(tarifaRescatada.getUnidadDelDescuento().equals("horas")){
                    txt_menosMinutos.setText("");
                    txt_menosHoras.setText(tarifaRescatada.getTiempoDelDescuento());
                    txt_menosDias.setText("");

                }else if(tarifaRescatada.getUnidadDelDescuento().equals("dias")){
                    txt_menosMinutos.setText("");
                    txt_menosHoras.setText("");
                    txt_menosDias.setText(tarifaRescatada.getTiempoDelDescuento());
                }
                                
            }else{
                check_aplicarDescuento.setSelected(false);
                txt_menosMinutos.setText("");
                txt_menosHoras.setText("");
                txt_menosDias.setText("");
            }
            
            if(tarifaRescatada.getTarifaCobraTiempoAdicional().equals("Si")){
                
                if(tarifaRescatada.getUnidadDelTiempoAdicional().equals("minutos")){
                    check_activarMinutosAdicionales.setSelected(true);
                    txt_subtarifaParaAplicar.setText(tarifaRescatada.getMontoTiempoAdicional());
                                        
                }else if(tarifaRescatada.getUnidadDelTiempoAdicional().equals("horas")){
                    check_activarHorasAdicionales.setSelected(true);
                    txt_subtarifaParaAplicar.setText(tarifaRescatada.getMontoTiempoAdicional());
                }
               
            }else{
                check_activarMinutosAdicionales.setSelected(false);
                check_activarHorasAdicionales.setSelected(false);
                txt_subtarifaParaAplicar.setText("");
            }    
        }   
    }//GEN-LAST:event_table_listaTarifasMouseClicked

    private void txt_subtarifaParaAplicarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_subtarifaParaAplicarKeyTyped
        //Cuenta la cantidad maxima de caracteres
        int numeroCaracteres = 20;
        if(txt_subtarifaParaAplicar.getText().length()== numeroCaracteres){
            evt.consume();
            JOptionPane.showMessageDialog(null,"Solo 20 caracteres");
            txt_subtarifaParaAplicar.setText("");
        }
    }//GEN-LAST:event_txt_subtarifaParaAplicarKeyTyped

    private void check_aplicarDescuentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_check_aplicarDescuentoMouseClicked
        int opcSeleccionada = cmb_frecuencia.getSelectedIndex();
        tieneDescuento = check_aplicarDescuento.isSelected();

        if(opcSeleccionada == 0){
            bloquearPanelDescuentos();
        
        }else if(opcSeleccionada == 1){
            txt_menosMinutos.setEditable(true);
            txt_menosHoras.setEditable(false);
            txt_menosDias.setEditable(false);

            if(!tieneDescuento){
                bloquearPanelDescuentos();
            }

        }else if(opcSeleccionada == 2){
            txt_menosMinutos.setEditable(false);
            txt_menosHoras.setEditable(true);
            txt_menosDias.setEditable(false);

            if(!tieneDescuento){
                bloquearPanelDescuentos();
            }
        }else if(opcSeleccionada == 3){
            txt_menosMinutos.setEditable(false);
            txt_menosHoras.setEditable(false);
            txt_menosDias.setEditable(true);

            if(!tieneDescuento){
                bloquearPanelDescuentos();
            }
        }
    }//GEN-LAST:event_check_aplicarDescuentoMouseClicked

    private void check_activarMinutosAdicionalesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_check_activarMinutosAdicionalesItemStateChanged
        cobroMinutos = check_activarMinutosAdicionales.isSelected();
        if(cobroMinutos){
            check_activarHorasAdicionales.setSelected(false);
            txt_subtarifaParaAplicar.setEditable(true);
        }else{
            txt_subtarifaParaAplicar.setEditable(false);
        }
    }//GEN-LAST:event_check_activarMinutosAdicionalesItemStateChanged

    private void check_activarHorasAdicionalesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_check_activarHorasAdicionalesItemStateChanged
        cobroHoras = check_activarHorasAdicionales.isSelected();
        if(cobroHoras){
            check_activarMinutosAdicionales.setSelected(false);
            txt_subtarifaParaAplicar.setEditable(true);
        }else{
            txt_subtarifaParaAplicar.setEditable(false);   
        }
    }//GEN-LAST:event_check_activarHorasAdicionalesItemStateChanged

    private void txt_menosDiasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_menosDiasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_menosDiasActionPerformed

    private void btn_ingresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ingresarActionPerformed
        registrarTarifa();
    }//GEN-LAST:event_btn_ingresarActionPerformed

    private void btn_editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editarActionPerformed
        actualizarTarifa();
    }//GEN-LAST:event_btn_editarActionPerformed

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed
        eliminarTarifa();
    }//GEN-LAST:event_btn_eliminarActionPerformed

    private void txt_montoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_montoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_montoKeyTyped

    private void cmb_frecuenciaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_frecuenciaItemStateChanged
        
       int opcSeleccionada = cmb_frecuencia.getSelectedIndex();
       tieneDescuento = check_aplicarDescuento.isSelected();
        
        if(opcSeleccionada == 0){
            check_activarMinutosAdicionales.setEnabled(false);
            check_activarHorasAdicionales.setEnabled(false); 
            
            if(tieneDescuento){
                txt_menosMinutos.setEditable(false);
                txt_menosHoras.setEditable(false);
                txt_menosDias.setEditable(false);
            }else{
                bloquearPanelDescuentos();
            }
        }
        if(opcSeleccionada == 1){
            check_activarMinutosAdicionales.setEnabled(false);
            check_activarHorasAdicionales.setEnabled(false); 
            
            if(tieneDescuento){
                txt_menosMinutos.setEditable(true);
                txt_menosHoras.setEditable(false);
                txt_menosDias.setEditable(false);
            }else{
                bloquearPanelDescuentos();
            }
                        
        }if(opcSeleccionada == 2){
            check_activarMinutosAdicionales.setEnabled(true);
            check_activarHorasAdicionales.setEnabled(false);
            
            if(tieneDescuento){
                txt_menosMinutos.setEditable(false);
                txt_menosHoras.setEditable(true);
                txt_menosDias.setEditable(false);
            }else{
                bloquearPanelDescuentos();
            }
        
        }if(opcSeleccionada == 3){
            check_activarHorasAdicionales.setEnabled(true);
            check_activarMinutosAdicionales.setEnabled(false);      
            
            if(tieneDescuento){
                txt_menosMinutos.setEditable(false);
                txt_menosHoras.setEditable(false);
                txt_menosDias.setEditable(true);
            }else{
                bloquearPanelDescuentos();
            }
        }
    }//GEN-LAST:event_cmb_frecuenciaItemStateChanged

    private void check_aplicarDescuentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_check_aplicarDescuentoItemStateChanged
        
       int opcSeleccionada = cmb_frecuencia.getSelectedIndex();
       tieneDescuento = check_aplicarDescuento.isSelected();
        
        if(opcSeleccionada == 1){
            check_activarMinutosAdicionales.setEnabled(false);
            check_activarHorasAdicionales.setEnabled(false); 
            
            if(tieneDescuento){
                txt_menosMinutos.setEditable(true);
                txt_menosHoras.setEditable(false);
                txt_menosDias.setEditable(false);
            }else{
                bloquearPanelDescuentos();
            }
                        
        }if(opcSeleccionada == 2){
            check_activarMinutosAdicionales.setEnabled(true);
            check_activarHorasAdicionales.setEnabled(false);
            
            if(tieneDescuento){
                txt_menosMinutos.setEditable(false);
                txt_menosHoras.setEditable(true);
                txt_menosDias.setEditable(false);
            }else{
                bloquearPanelDescuentos();
            }
        
        }if(opcSeleccionada == 3){
            check_activarHorasAdicionales.setEnabled(true);
            check_activarMinutosAdicionales.setEnabled(false);      
            
            if(tieneDescuento){
                txt_menosMinutos.setEditable(false);
                txt_menosHoras.setEditable(false);
                txt_menosDias.setEditable(true);
            }else{
                bloquearPanelDescuentos();
            }
        }
    }//GEN-LAST:event_check_aplicarDescuentoItemStateChanged

    private void txt_nombreTarifaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_nombreTarifaFocusGained
       
    }//GEN-LAST:event_txt_nombreTarifaFocusGained

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cerrarGestorTarifas();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionarTarifas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionarTarifas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionarTarifas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionarTarifas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    //Esto cambia la apariencia de la app para que se acomode al Siste Operativo
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    new GestionarTarifas().setVisible(true);
                }catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    //Logger.getLogger(GestionarTarifas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_editar;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JButton btn_ingresar;
    private javax.swing.JCheckBox check_activarHorasAdicionales;
    private javax.swing.JCheckBox check_activarMinutosAdicionales;
    private javax.swing.JCheckBox check_anularTarif;
    private javax.swing.JCheckBox check_aplicarDescuento;
    private javax.swing.JComboBox<String> cmb_frecuencia;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable table_listaTarifas;
    private javax.swing.JTextField txt_menosDias;
    private javax.swing.JTextField txt_menosHoras;
    private javax.swing.JTextField txt_menosMinutos;
    private javax.swing.JTextField txt_monto;
    private javax.swing.JTextField txt_nombreTarifa;
    private javax.swing.JTextField txt_subtarifaParaAplicar;
    // End of variables declaration//GEN-END:variables
 
    //Metodo que prepara el objeto tarifa para registrar en la BD
    public void registrarTarifa(){
       
        int validacion= 0;
        int frecuencia_cmb = 0; 
        String frecuencia_string = "";
        String tarifaEstaAnulada = "";
        String tarifaTieneDescuento = "";
        String unidadDeDescuento = "";
        String unidadTiempoAdicional = "";
        String cobrarTiempoAdicional = "";
        tarifaAnulada = check_anularTarif.isSelected();
        cobroMinutos = check_activarMinutosAdicionales.isSelected();
        cobroHoras = check_activarHorasAdicionales.isSelected();
        boolean laTarifaYaExiste = false;        
        String nombreTarifa = txt_nombreTarifa.getText();
        String monto = txt_monto.getText();
        String descuentoMinutos = txt_menosMinutos.getText();
        String descuentoHoras = txt_menosHoras.getText();
        String descuentoDias = txt_menosDias.getText();
        String subTarifaAAplicar = txt_subtarifaParaAplicar.getText();
        frecuencia_cmb = cmb_frecuencia.getSelectedIndex();
               
                               
        if(nombreTarifa.equals("")){
            txt_nombreTarifa.setBackground(Color.red);
            validacion++;
        }
        
        if(monto.equals("")){
            txt_monto.setBackground(Color.red);
            validacion++;
        }
        
        if(frecuencia_cmb == 0){
            cmb_frecuencia.setBackground(Color.red);
            validacion++;
        }else if(frecuencia_cmb == 1){
            frecuencia_string = "MINUTO";
        }else if(frecuencia_cmb == 2){
            frecuencia_string = "HORA";
        }else if(frecuencia_cmb == 3){
            frecuencia_string = "DIA";
        }
        
        if(tarifaAnulada){
            tarifaEstaAnulada = "Si";
        }else{
            tarifaEstaAnulada = "No";
        }
        
        if(tieneDescuento){
            tarifaTieneDescuento = "Si";
            
            if(descuentoMinutos.equals("") && txt_menosMinutos.isEditable()) {
                JOptionPane.showMessageDialog(null, "Indique el numero de minutos que desea descontar.");
                validacion++;
            }else if(descuentoHoras.equals("") && txt_menosHoras.isEditable()){
                JOptionPane.showMessageDialog(null, "Indique el numero de horas que desea descontar.");
                validacion++;
            }else if(descuentoDias.equals("") && txt_menosDias.isEditable()){
                JOptionPane.showMessageDialog(null, "Indique el numero de días que desea descontar.");
                validacion++;
            }else{
                if(!descuentoMinutos.isEmpty()){
                    unidadDeDescuento = "minutos";
                    nuevaTarifa.setTiempoDelDescuento(descuentoMinutos);
                    nuevaTarifa.setUnidadDelDescuento(unidadDeDescuento);
                }else if(!descuentoHoras.isEmpty()){
                    unidadDeDescuento = "horas";
                    nuevaTarifa.setTiempoDelDescuento(descuentoHoras);
                    nuevaTarifa.setUnidadDelDescuento(unidadDeDescuento);
                }else if(!descuentoDias.isEmpty()){
                    unidadDeDescuento = "dias";
                    nuevaTarifa.setTiempoDelDescuento(descuentoDias);
                    nuevaTarifa.setUnidadDelDescuento(unidadDeDescuento);
                }
            }
        }else{
            tarifaTieneDescuento = "No";
        }
        
        if(cobroMinutos){
            cobrarTiempoAdicional = "Si";
            nuevaTarifa.setTarifaCobraTiempoAdicional(cobrarTiempoAdicional);
            
            if(subTarifaAAplicar.equals("")){
                JOptionPane.showMessageDialog(null, "Indique el monto que desea aplicar para el cobro adicional.");
                validacion++;
            }else{              
                unidadTiempoAdicional = "minutos";
                nuevaTarifa.setMontoTiempoAdicional(subTarifaAAplicar); 
                nuevaTarifa.setUnidadDelTiempoAdicional(unidadTiempoAdicional);
            }                
        
        }else if(cobroHoras){
            cobrarTiempoAdicional = "Si";
            nuevaTarifa.setTarifaCobraTiempoAdicional(cobrarTiempoAdicional);
            
            if(subTarifaAAplicar.equals("")){
                txt_subtarifaParaAplicar.setBackground(Color.red);
                JOptionPane.showMessageDialog(null, "Indique el monto para el cobro adicional que desea aplicar.");
                validacion++;
            }else{
                unidadTiempoAdicional = "horas";
                nuevaTarifa.setMontoTiempoAdicional(subTarifaAAplicar);
                nuevaTarifa.setUnidadDelTiempoAdicional(unidadTiempoAdicional);
            }  
        }else{
            cobrarTiempoAdicional = "No";
            nuevaTarifa.setTarifaCobraTiempoAdicional(cobrarTiempoAdicional);
        }
        
        laTarifaYaExiste = tarifaControla.evaluarExistenciaDeTarifa(nombreTarifa);
        if(laTarifaYaExiste){
            txt_nombreTarifa.setBackground(Color.red);
            JOptionPane.showMessageDialog(null, "La tarifa indicada ya se encuentra registrada.");
            Normalizar();
        }else{
            if (validacion == 0) {
            
                //Encapsulamos el objeto tarifa
                nuevaTarifa.setId(0);
                nuevaTarifa.setNombreTarifa(nombreTarifa);
                nuevaTarifa.setMontoTarifa(monto);
                nuevaTarifa.setFrecuenciaTarifa(frecuencia_string);
                nuevaTarifa.setTarifaAnulada(tarifaEstaAnulada);
                nuevaTarifa.setTarifaTieneDescuento(tarifaTieneDescuento);
                
                
                tarifaControla.crearTarifa(nuevaTarifa);
                
                Object[] fila = new Object[4];
                fila[0] = nombreTarifa;
                fila[1] = monto;
                fila[2] = frecuencia_string;
                fila[3] = tarifaEstaAnulada;
                modeloTablaTarifas.addRow(fila);

                txt_nombreTarifa.setBackground(Color.GREEN);
                txt_subtarifaParaAplicar.setBackground(Color.GREEN);
                JOptionPane.showMessageDialog(null, "Tarifa registrada satisfactoriamente.");
                
                tarifaControla.limpiarTarifa(nuevaTarifa);
                
                Limpiar();
                Normalizar();
                txt_nombreTarifa.requestFocus();
                
            }else{
                JOptionPane.showMessageDialog(null, "Debes de llenar todos los campos.");
                Normalizar();
            }
        }      
    }     
     
    //Metodo que actualiza un convenio
    public void actualizarTarifa(){
        
        int validacion= 0;
        int frecuencia_cmb = 0; 
        String frecuencia_string = "";
        String tarifaEstaAnulada = "";
        String tarifaTieneDescuento = "";
        String unidadDeDescuento = "";
        String unidadTiempoAdicional = "";
        String cobrarTiempoAdicional = "";
        tarifaAnulada = check_anularTarif.isSelected();
        cobroMinutos = check_activarMinutosAdicionales.isSelected();
        cobroHoras = check_activarHorasAdicionales.isSelected();
        boolean laTarifaYaExiste = false;        
        String nombreTarifa = txt_nombreTarifa.getText();
        String monto = txt_monto.getText();
        String descuentoMinutos = txt_menosMinutos.getText();
        String descuentoHoras = txt_menosHoras.getText();
        String descuentoDias = txt_menosDias.getText();
        String subTarifaAAplicar = txt_subtarifaParaAplicar.getText();
        frecuencia_cmb = cmb_frecuencia.getSelectedIndex();
               
                               
        if(nombreTarifa.equals("")){
            txt_nombreTarifa.setBackground(Color.red);
            validacion++;
        }
        
        if(monto.equals("")){
            txt_monto.setBackground(Color.red);
            validacion++;
        }
        
        if(frecuencia_cmb == 0){
            cmb_frecuencia.setBackground(Color.red);
            validacion++;
        }else if(frecuencia_cmb == 1){
            frecuencia_string = "MINUTO";
        }else if(frecuencia_cmb == 2){
            frecuencia_string = "HORA";
        }else if(frecuencia_cmb == 3){
            frecuencia_string = "DIA";
        }
        
        if(tarifaAnulada){
            tarifaEstaAnulada = "Si";
        }else{
            tarifaEstaAnulada = "No";
        }
        
        if(tieneDescuento){
            tarifaTieneDescuento = "Si";
            
            if(descuentoMinutos.equals("") && txt_menosMinutos.isEditable()) {
                JOptionPane.showMessageDialog(null, "Indique el numero de minutos que desea descontar.");
                validacion++;
            }else if(descuentoHoras.equals("") && txt_menosHoras.isEditable()){
                JOptionPane.showMessageDialog(null, "Indique el numero de horas que desea descontar.");
                validacion++;
            }else if(descuentoDias.equals("") && txt_menosDias.isEditable()){
                JOptionPane.showMessageDialog(null, "Indique el numero de días que desea descontar.");
                validacion++;
            }else{
                if(!descuentoMinutos.isEmpty()){
                    unidadDeDescuento = "minutos";
                    editTarifa.setTiempoDelDescuento(descuentoMinutos);
                    editTarifa.setUnidadDelDescuento(unidadDeDescuento);
                }else if(!descuentoHoras.isEmpty()){
                    unidadDeDescuento = "horas";
                    editTarifa.setTiempoDelDescuento(descuentoHoras);
                    editTarifa.setUnidadDelDescuento(unidadDeDescuento);
                }else if(!descuentoDias.isEmpty()){
                    unidadDeDescuento = "dias";
                    editTarifa.setTiempoDelDescuento(descuentoDias);
                    editTarifa.setUnidadDelDescuento(unidadDeDescuento);
                }
            }
        }else{
            tarifaTieneDescuento = "No";
        }
        
        if(cobroMinutos){
            cobrarTiempoAdicional = "Si";
            editTarifa.setTarifaCobraTiempoAdicional(cobrarTiempoAdicional);
            
            if(subTarifaAAplicar.equals("")){
                JOptionPane.showMessageDialog(null, "Indique el monto que desea aplicar para el cobro adicional.");
                validacion++;
            }else{              
                unidadTiempoAdicional = "minutos";
                editTarifa.setMontoTiempoAdicional(subTarifaAAplicar); 
                editTarifa.setUnidadDelTiempoAdicional(unidadTiempoAdicional);
            }                
        
        }else if(cobroHoras){
            cobrarTiempoAdicional = "Si";
            editTarifa.setTarifaCobraTiempoAdicional(cobrarTiempoAdicional);
            
            if(subTarifaAAplicar.equals("")){
                txt_subtarifaParaAplicar.setBackground(Color.red);
                JOptionPane.showMessageDialog(null, "Indique el monto para el cobro adicional que desea aplicar.");
                validacion++;
            }else{
                unidadTiempoAdicional = "horas";
                editTarifa.setMontoTiempoAdicional(subTarifaAAplicar);
                editTarifa.setUnidadDelTiempoAdicional(unidadTiempoAdicional);
            }  
        }else{
            cobrarTiempoAdicional = "No";
            editTarifa.setTarifaCobraTiempoAdicional(cobrarTiempoAdicional);
        }
        
        if (validacion == 0) {

            FilaAnterior = table_listaTarifas.getSelectedRow();
            String nombre = table_listaTarifas.getValueAt(FilaAnterior, 0).toString();

            //Encapsulamos el objeto tarifa a editar
            editTarifa.setId(0);
            editTarifa.setNombreTarifa(nombreTarifa);
            editTarifa.setMontoTarifa(monto);
            editTarifa.setFrecuenciaTarifa(frecuencia_string);
            editTarifa.setTarifaAnulada(tarifaEstaAnulada);
            editTarifa.setTarifaTieneDescuento(tarifaTieneDescuento);
            
            tarifaControla.actualizarTarifa(nombre, editTarifa);

            Object[] fila = new Object[4];
            fila[0] = nombreTarifa;
            fila[1] = monto;
            fila[2] = frecuencia_string;
            fila[3] = tarifaEstaAnulada;
            modeloTablaTarifas.addRow(fila);
          
            tarifaControla.limpiarTarifa(editTarifa);
            modeloTablaTarifas.removeRow(FilaAnterior);
            btn_editar.setEnabled(false);
            btn_ingresar.setEnabled(true);
            btn_eliminar.setEnabled(false);

            txt_nombreTarifa.setBackground(Color.GREEN);
            txt_subtarifaParaAplicar.setBackground(Color.GREEN);
            JOptionPane.showMessageDialog(null, "Tarifa actualizada satisfactoriamente.");
            Limpiar();
            Normalizar();

        } else {
            JOptionPane.showMessageDialog(null, "Debes llenar todos los campos.");
            Normalizar();
        }
    }
    
    //Metodo que prepara el objeto tarifa paraser eliminado
    public void eliminarTarifa(){
        
        Fila = table_listaTarifas.getSelectedRow();
        int cantidadFilas = table_listaTarifas.getSelectedRowCount();

        if(cantidadFilas == 0){
            JOptionPane.showMessageDialog(null, "Seleccione el parqueadero que desea eliminar.");
        }else{

            int decision = JOptionPane.showConfirmDialog(this, "¿Está seguro que desea eliminar?", "Eliminar tarifa", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            String nombreTarifa = table_listaTarifas.getValueAt(Fila, 0).toString();
            if(decision == JOptionPane.YES_OPTION){
                
                int idTarifa = tarifaControla.consultarIdDeunaTarifa(nombreTarifa);
                boolean laTarifaSeEstaImplementando = tarifaControla.validarSiLaTarifaSeEstaImplementando(idTarifa);
                
                if(laTarifaSeEstaImplementando){
                    JOptionPane.showMessageDialog(null, "La tarifa seleccionada se está implementando actualmente.");
                }else{
                    tarifaControla.eliminarTarifa(nombreTarifa);
                    modeloTablaTarifas.removeRow(Fila);
                    Limpiar();
                    btn_editar.setEnabled(false);
                    btn_eliminar.setEnabled(false);
                    btn_ingresar.setEnabled(true);
                }    
            }else if(decision == JOptionPane.NO_OPTION){
            }
        }
    }

    //Metodo que limpia el formulario en caso de ingresar tablero principal
    private void Limpiar(){
        txt_nombreTarifa.setText("");
        txt_monto.setText("");
        txt_subtarifaParaAplicar.setText("");
        cmb_frecuencia.setSelectedIndex(0);
        check_aplicarDescuento.setSelected(false);
        check_anularTarif.setSelected(false);
        check_activarHorasAdicionales.setSelected(false);
        check_activarMinutosAdicionales.setSelected(false);
        txt_menosDias.setText("");
        txt_menosHoras.setText("");
        txt_menosMinutos.setText("");        
    }
    
    //Metodo que normaliza el formulario en caso tablero compartido
    public void Normalizar(){
        txt_nombreTarifa.setBackground(Color.WHITE);
        txt_monto.setBackground(Color.WHITE);
        txt_subtarifaParaAplicar.setBackground(Color.WHITE);
        cmb_frecuencia.setBackground(Color.WHITE);
    }
   
    //Metodo que bloquea el panel de descuentos
    private void bloquearPanelDescuentos() {
        txt_menosMinutos.setEditable(false);
        txt_menosHoras.setEditable(false);
        txt_menosDias.setEditable(false);
    }
    
    //Metodo que se invoca al cerrar el jFrame
    private void cerrarGestorTarifas(){
        
        String botones[] = {"Cerrar", "Cancelar"};
        int eleccion = JOptionPane.showOptionDialog(this, "¿Está seguro que desea cerrar?", "Administrador de tarifas", 0, 0, null, botones, this);
        
        if(eleccion == JOptionPane.YES_OPTION){
            dispose();
            PanelParametros.btn_tarifas.setEnabled(true);
        }
    }
}


